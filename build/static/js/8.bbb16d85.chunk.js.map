{"version":3,"sources":["components/DriversTableList/DriversInfoModal.js","components/DriversTableList/AddDriverModal.js","components/DriversTableList/DriversTableList.js"],"names":["DriversInfoModal","props","useState","isModalVisible","setIsModalVisible","confirmLoading","setConfirmLoading","ifCanceled","setIfCanceled","drivers","setDrivers","images","setImages","imagePath","setImagePath","useEffect","axios","get","then","res","data","catch","error","console","log","type","onClick","imagesCopy","find","imageOwnerId","info","id","imageReferenceId","title","visible","onOk","passedData","setTimeout","onCancel","afterClose","afterClosing","footer","loading","delete","params","referenceId","filter","driversCopy","driver","success","content","danger","firstName","middleName","lastName","contactNumber","address","email","className","height","src","style","borderColor","border","AddDriverModal","file","filename","setFilename","uploadedImagePath","setUploadedImagePath","handleCancel","onFinish","values","post","response","filePath","destroyOnClose","form","htmlType","name","initialValues","remember","onFinishFailed","errorInfo","Item","label","rules","required","message","action","listType","maxCount","onChange","onRemove","icon","UploadOutlined","DriversTableList","Search","dataFromModal","setDataFromModal","modalClosed","justify","span","direction","placeholder","onSearch","value","_res","allowClear","enterButton","orientation","dataSource","scroll","x","y","sticky","dataIndex","fixed","render"],"mappings":"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","file":"static/js/8.bbb16d85.chunk.js","sourcesContent":["import React, { useState,useEffect } from \"react\";\r\nimport { Modal, Button, Image, Card } from \"antd\";\r\nimport axios from \"axios\";\r\n\r\n\r\nfunction DriversInfoModal(props) {\r\n  const [isModalVisible, setIsModalVisible] = useState(false);\r\n  const [modalValue, setModalValue] = useState(\"\");\r\n  const [confirmLoading, setConfirmLoading] = useState(false);\r\n  const [ifCanceled, setIfCanceled] = useState(false);\r\n  const [drivers, setDrivers] = useState([]);\r\n  const [images, setImages] = useState([]);\r\n  const [imagePath, setImagePath] = useState([]);\r\n\r\n  useEffect(() => {\r\n    axios\r\n    .get(\"/api/v1/images/\")\r\n    .then((res) => {\r\n      let data = res.data;\r\n      setImages(data);\r\n    })\r\n    .catch((error) => console.log(error));\r\n  }, []);\r\n\r\n  \r\n  \r\n\r\n  const showModal = () => {\r\n    setIsModalVisible(true);\r\n    axios\r\n    .get(\"/api/v1/images/\")\r\n    .then((res) => {\r\n      let imagesCopy = [...images];\r\n      imagesCopy = imagesCopy.find((imagesCopy) => imagesCopy.imageOwnerId === props.info.id && imagesCopy.imageReferenceId === 1);\r\n      setImagePath(imagesCopy.imagePath);\r\n    })\r\n    .catch((error) => console.log(error)); \r\n  };\r\n\r\n  const handleOk = () => {\r\n    props.passedData(props.info);\r\n\r\n    setConfirmLoading(true);\r\n    setIfCanceled(false);\r\n    setTimeout(() => {\r\n      setIsModalVisible(false);\r\n      setConfirmLoading(false);\r\n    }, 2000);\r\n  };\r\n\r\n  const handleDelete = (id) => {\r\n    setConfirmLoading(true);\r\n    setIfCanceled(false);\r\n    setTimeout(() => {\r\n      setIsModalVisible(false);\r\n      setConfirmLoading(false);\r\n    }, 2000);\r\n    console.log(id);\r\n    axios\r\n    .delete(\"/api/v1/images/delete_image\", {\r\n      params: {\r\n        id,\r\n        referenceId: 1,\r\n      },\r\n    })\r\n    .then((res) => {\r\n      let imagesCopy = [...images];\r\n      imagesCopy = imagesCopy.filter((imagesCopy) => imagesCopy.imageOwnerId !== id && imagesCopy.imageReferenceId === 1);\r\n      setImages(imagesCopy);\r\n      console.log(imagesCopy);\r\n      \r\n    })\r\n    .catch((error) => console.log(error));\r\n\r\n    axios\r\n      .delete(\"/api/v1/drivers/delete_driver\", {\r\n        params: {\r\n          id,\r\n        },\r\n      })\r\n      .then((res) => {\r\n        let driversCopy = [...drivers];\r\n        driversCopy = driversCopy.filter((driver) => driver.id !== id);\r\n        setDrivers(driversCopy);\r\n        console.log(driversCopy);\r\n\r\n        Modal.success({\r\n          content: 'Driver has been Removed',\r\n        });\r\n      })\r\n      .catch((error) => console.log(error));\r\n    \r\n  };\r\n\r\n  const handleCancel = () => {\r\n    setIfCanceled(true);\r\n    setIsModalVisible(false);\r\n  };\r\n  const handleClose = () => {\r\n    if (ifCanceled) {\r\n    } else {\r\n      props.afterClosing();\r\n    }\r\n  };\r\n  return (\r\n    <div>\r\n      <Button type=\"primary\" onClick={showModal}>\r\n        View\r\n      </Button>\r\n      <Modal\r\n        title=\"Driver Information\"\r\n        visible={isModalVisible}\r\n        confirmLoading={confirmLoading}\r\n        onOk={handleOk}\r\n        onCancel={handleCancel}\r\n        afterClose={handleClose}\r\n        footer={[\r\n          <Button loading={confirmLoading} onClick={() => handleDelete(props.info.id)} danger>\r\n              Remove\r\n          </Button>\r\n          ]}\r\n      >\r\n        <p>\r\n          <h3>ID:</h3>\r\n          {props.info.id}\r\n        </p>\r\n        <p>\r\n          <h3>Name:</h3>\r\n          {props.info.firstName} {props.info.middleName} {props.info.lastName}\r\n        </p>\r\n        <p>\r\n          <h3>Contact Number:</h3>\r\n          {props.info.contactNumber}\r\n        </p>\r\n        <p>\r\n          <h3>Address: </h3>\r\n          {props.info.address}\r\n        </p>\r\n        <p>\r\n          <h3>Email Address: </h3>\r\n          {props.info.email}\r\n        </p>\r\n      <h3>Uploaded Images: </h3>\r\n          <Card className=\"shadow-sm\">\r\n              <Image\r\n                height={100}\r\n                src={`/api/v1/images/${imagePath}`}\r\n                style={{ borderColor: \"white\", border: \"10px\" }}\r\n              />\r\n\r\n          </Card>\r\n      </Modal>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default DriversInfoModal;\r\n","import React, { useState} from \"react\";\r\nimport { Form, Input, Modal, Button, Upload, Space } from \"antd\";\r\nimport { UploadOutlined } from \"@ant-design/icons\";\r\nimport axios from \"axios\";\r\n\r\n\r\nfunction AddDriverModal(props) {\r\n  const [isModalVisible, setIsModalVisible] = useState(false);\r\n  const [modalValue, setModalValue] = useState(\"\");\r\n  const [confirmLoading, setConfirmLoading] = useState(false);\r\n  const [ifCanceled, setIfCanceled] = useState(false);\r\n  const [drivers, setDrivers] = useState([]);\r\n  const [file, setFile] = useState({});\r\n  const [filename, setFilename] = useState(\"Choose file\");\r\n  const [uploadedImagePath, setUploadedImagePath] = useState();\r\n  \r\n  \r\n\r\n  const checking = (file) => {\r\n    setFilename(file);\r\n    console.log(filename);\r\n  };\r\n  const unchecking = () => {\r\n    setFilename(\"Choose file\");\r\n    console.log(filename);\r\n  };\r\n  const viewFile = () => {\r\n    if (filename == \"Choose file\") {\r\n      console.log(\"No image selected\");\r\n    } else {\r\n      setUploadedImagePath(filename.file.response.filePath);\r\n      console.log(filename.file.response);\r\n    }\r\n  };\r\n  const showModal = () => {\r\n    setIsModalVisible(true);\r\n    console.log(props.info);\r\n    \r\n  };\r\n\r\n  const handleCancel = () => {\r\n    setIfCanceled(true);\r\n    setIsModalVisible(false);\r\n  };\r\n  const handleClose = () => {\r\n    if (ifCanceled) {\r\n    } else {\r\n      props.afterClosing();\r\n    }\r\n  };\r\n\r\n  const onFinish = (values) => {\r\n    console.log(values);\r\n    props.passedData(props.info);\r\n    setConfirmLoading(true);\r\n    setIfCanceled(false);\r\n    setTimeout(() => {\r\n      setIsModalVisible(false);\r\n      setConfirmLoading(false);\r\n    }, 2000);\r\n    \r\n    axios\r\n      .post(\"/api/v1/drivers/add_driver\", values)\r\n      .then((res) => {\r\n        let driversCopy = [...drivers];\r\n        driversCopy = [...driversCopy, res.data];\r\n        console.log(driversCopy);\r\n        setDrivers(driversCopy);\r\n        setFilename(file);\r\n            Modal.success({\r\n              content: 'Successfully Added New Driver',\r\n            })\r\n            setUploadedImagePath(filename.file.response.filePath);\r\n          console.log(uploadedImagePath);\r\n      axios\r\n        .post(\"/api/v1/images/save_image\", {\r\n          imageOwnerId: res.data.id,\r\n          imageReferenceId: 1,\r\n          imagePath: uploadedImagePath,\r\n        }) \r\n        \r\n      })\r\n      .catch((error) => console.log(error));\r\n  };\r\n\r\n\r\n  const onFinishFailed = (errorInfo) => {\r\n    Modal.error({\r\n      content: 'Failure to Add New Driver',\r\n    });\r\n    setTimeout(() => {\r\n      setIsModalVisible(true);\r\n      setConfirmLoading(false);\r\n    }, 2000);\r\n    console.log(\"Failed:\", errorInfo);\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <Button type=\"primary\" onClick={showModal}>\r\n        Add Driver\r\n      </Button>\r\n     \r\n      <Modal\r\n        title=\"Add Driver:\"\r\n        visible={isModalVisible}\r\n        confirmLoading={confirmLoading}\r\n        onOk={onFinish}\r\n        onCancel={handleCancel}\r\n        afterClose={handleClose}\r\n        destroyOnClose={true}\r\n        footer={[\r\n        <Button key=\"back\" onClick={handleCancel}>\r\n          Cancel\r\n        </Button>,\r\n        <Button form=\"myForm\" key=\"submit\" htmlType=\"submit\" type=\"primary\" loading={confirmLoading} onClick={onFinish}>\r\n          Add\r\n        </Button>\r\n          ]}\r\n      >\r\n        <Form\r\n            name=\"basic\"\r\n            initialValues={{ remember: true }}\r\n            onFinish={onFinish}\r\n            onFinishFailed={onFinishFailed}\r\n            id=\"myForm\"\r\n        >\r\n     \r\n         \r\n        <Form.Item\r\n          label=\"First Name\"\r\n          name=\"firstName\"\r\n          rules={[{ required: true, message: \"Please input your Firstname!\" }]}\r\n        >\r\n          <Input />\r\n        </Form.Item>\r\n\r\n        <Form.Item\r\n          label=\"Middle Name\"\r\n          name=\"middleName\"\r\n          rules={[\r\n            { required: true, message: \"Please input your Middlename!\" },\r\n          ]}\r\n        >\r\n          <Input />\r\n        </Form.Item>\r\n\r\n        <Form.Item\r\n          label=\"Last Name\"\r\n          name=\"lastName\"\r\n          rules={[{ required: true, message: \"Please input your Lastname!\" }]}\r\n        >\r\n          <Input />\r\n        </Form.Item>\r\n\r\n        <Form.Item\r\n          label=\"Address\"\r\n          name=\"address\"\r\n          rules={[{ required: true, message: \"Please input your Address!\" }]}\r\n        >\r\n          <Input />\r\n        </Form.Item>\r\n\r\n        <Form.Item\r\n          label=\"Contact Number\"\r\n          name=\"contactNumber\"\r\n          rules= {[{ required: true, message: \"Please input your Contact Number!\" }]}\r\n        >\r\n          <Input />\r\n        </Form.Item>\r\n\r\n        <Form.Item\r\n          label=\"Generate Password\"\r\n          name=\"generatePassword\"\r\n          rules={[{ required: true, message: \"Please input your password!\" }]}\r\n        >\r\n          <Input />\r\n        </Form.Item>\r\n\r\n        <Form.Item\r\n          label=\"Email\"\r\n          name=\"email\"\r\n          rules={[{ required: true, type: \"email\", message: \"Please input your Email!\" }]}\r\n        >\r\n          <Input />\r\n        </Form.Item>\r\n        <Upload\r\n              action=\"/api/v1/images/add_image\"\r\n              listType=\"picture\"\r\n              maxCount={1}\r\n              file={file}\r\n              onChange = {checking} \r\n              onRemove={unchecking}\r\n            >\r\n            <Button>Choose Image (Max: 1)</Button>\r\n        </Upload>\r\n            <Space>\r\n              <Button onClick={viewFile} icon={<UploadOutlined />}>Upload</Button>\r\n            </Space>\r\n        \r\n        </Form>\r\n        \r\n      </Modal>\r\n      \r\n    </div>\r\n  );\r\n}\r\n\r\nexport default AddDriverModal;\r\n","import React, { Suspense, useEffect, useState} from \"react\";\r\nimport { Table, Tag, Space, Input, Row, Col, Button, Divider } from \"antd\";\r\nimport axios from \"axios\";\r\nimport Column from \"antd/lib/table/Column\";\r\nimport ColumnGroup from \"antd/lib/table/ColumnGroup\";\r\nimport DriversInfoModal from \"./DriversInfoModal\";\r\nimport AddDriverModal from \"./AddDriverModal\";\r\n\r\nfunction DriversTableList() {\r\n  const [drivers, setDrivers] = useState([]);\r\n  const { Search } = Input;\r\n  const [dataFromModal, setDataFromModal] = useState(\"\");\r\n\r\n  useEffect(() => {\r\n    axios\r\n      .get(\"/api/v1/drivers/\")\r\n      .then((res) => {\r\n        console.log(res);\r\n        let data = res.data;\r\n        setDrivers(data);\r\n      })\r\n      .catch((error) => console.log(error));\r\n  }, []);\r\n\r\n\r\n\r\n  const onSearch = (value) => {\r\n    axios\r\n      .post(\"/api/v1/drivers/search_drivers\", { value: value })\r\n      .then((_res) => {\r\n        console.log(_res);\r\n        let data = _res.data;\r\n        setDrivers(data);\r\n        console.log(\"success\");\r\n      });\r\n\r\n    console.log(value);\r\n  };\r\n\r\n  const modalClosed = () => {\r\n    console.log(\"Passed data from modal\", dataFromModal);\r\n    axios\r\n    .get(\"/api/v1/drivers/\")\r\n    .then((res) => {\r\n      console.log(res);\r\n     \r\n      let data = res.data;\r\n      setDrivers(data);\r\n    })\r\n    \r\n    \r\n  };\r\n\r\n  return (\r\n    \r\n    <div>\r\n      <Row justify=\"space-between\">\r\n        <Col span={4}>\r\n          <Space direction=\"vertical\">\r\n          <Search\r\n              placeholder=\"Search Drivers\"\r\n              onSearch={onSearch}\r\n              allowClear={true}\r\n              enterButton\r\n            />\r\n          </Space>\r\n        </Col>\r\n        <Col span={4}>\r\n            <AddDriverModal\r\n                  info={\"\"}\r\n                  passedData={setDataFromModal}\r\n                  afterClosing={modalClosed}\r\n                />\r\n        </Col>\r\n      </Row>\r\n      <Divider orientation=\"center\">List of Drivers</Divider>\r\n      <Row>\r\n        <Table dataSource={drivers} scroll={{ x: 1000, y: 500 }} sticky>\r\n          {/* <ColumnGroup title=\"Id\" dataIndex=\"id\" key=\"id\"></ColumnGroup> */}\r\n          {/* <ColumnGroup title=\"Name\" key=\"name\"> */}\r\n            <Column title=\"Firstname\" dataIndex=\"firstName\" key=\"firstName\"></Column>\r\n            <Column title=\"Middlename\" dataIndex=\"middleName\" key=\"middleName\"></Column>\r\n            <Column title=\"Lastname\" dataIndex=\"lastName\" key=\"lastName\"></Column>\r\n          {/* </ColumnGroup> */}\r\n          <ColumnGroup\r\n            title=\"Contact\"\r\n            dataIndex=\"contactNumber\"\r\n            key=\"contactNumber\"\r\n          ></ColumnGroup>\r\n          <ColumnGroup\r\n            title=\"Address\"\r\n            dataIndex=\"address\"\r\n            key=\"address\"\r\n          ></ColumnGroup>\r\n          <ColumnGroup\r\n            title=\"Email\"\r\n            dataIndex=\"email\"\r\n            key=\"email\"\r\n          ></ColumnGroup>\r\n          <ColumnGroup\r\n            title=\"Actions\"\r\n            key=\"actions\"\r\n            fixed=\"right\"\r\n            render={(value) => (\r\n              <Space>\r\n                <DriversInfoModal\r\n                  info={value}\r\n                  passedData={setDataFromModal}\r\n                  afterClosing={modalClosed}\r\n                />\r\n              </Space>\r\n            )}\r\n          ></ColumnGroup>\r\n        </Table>\r\n      </Row>\r\n      \r\n    </div>\r\n  );\r\n}\r\n\r\nexport default DriversTableList;\r\n"],"sourceRoot":""}