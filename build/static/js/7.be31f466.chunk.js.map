{"version":3,"sources":["components/DriversTableList/DriversInfoModal.js","components/DriversTableList/AddDriverModal.js","components/DriversTableList/DriversTableList.js"],"names":["DriversInfoModal","props","useState","isModalVisible","setIsModalVisible","confirmLoading","setConfirmLoading","ifCanceled","setIfCanceled","drivers","setDrivers","images","setImages","setImagePath","type","onClick","axios","get","then","res","imagesCopy","find","imageOwnerId","info","id","imageReferenceId","imagePath","catch","error","console","log","title","visible","onOk","passedData","setTimeout","onCancel","afterClose","afterClosing","footer","loading","delete","params","referenceId","filter","driversCopy","driver","success","content","danger","firstName","middleName","lastName","contactNumber","address","email","className","map","image","index","md","span","height","src","style","borderColor","border","AddDriverModal","handleCancel","onFinish","values","post","destroyOnClose","form","htmlType","layout","name","initialValues","remember","onFinishFailed","errorInfo","Item","label","rules","required","message","DriversTableList","Search","dataFromModal","setDataFromModal","useEffect","data","modalClosed","justify","direction","placeholder","onSearch","value","_res","allowClear","enterButton","orientation","dataSource","scroll","x","y","sticky","dataIndex","fixed","render"],"mappings":"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","file":"static/js/7.be31f466.chunk.js","sourcesContent":["import React, { useState, useEffect } from \"react\";\r\nimport { Modal, Button, Image, Card, Col, Row } from \"antd\";\r\nimport axios from \"axios\";\r\n\r\nfunction DriversInfoModal(props) {\r\n  const [isModalVisible, setIsModalVisible] = useState(false);\r\n  const [modalValue, setModalValue] = useState(\"\");\r\n  const [confirmLoading, setConfirmLoading] = useState(false);\r\n  const [ifCanceled, setIfCanceled] = useState(false);\r\n  const [drivers, setDrivers] = useState([]);\r\n  const [images, setImages] = useState([]);\r\n  const [imagePath, setImagePath] = useState([]);\r\n\r\n  // useEffect(() => {\r\n  //   axios\r\n  //     .get(\"/api/v1/images/\")\r\n  //     .then((res) => {\r\n  //       let data = res.data;\r\n  //       setImages(data);\r\n  //     })\r\n  //     .catch((error) => console.log(error));\r\n  // }, []);\r\n\r\n  const showModal = () => {\r\n    setIsModalVisible(true);\r\n    axios\r\n      .get(\"/api/v1/images/\")\r\n      .then((res) => {\r\n        let imagesCopy = [...images];\r\n        imagesCopy = imagesCopy.find(\r\n          (imagesCopy) =>\r\n            imagesCopy.imageOwnerId === props.info.id &&\r\n            imagesCopy.imageReferenceId === 2\r\n        );\r\n        setImagePath(imagesCopy.imagePath);\r\n      })\r\n      .catch((error) => console.log(error));\r\n  };\r\n\r\n  const handleOk = () => {\r\n    props.passedData(props.info);\r\n\r\n    setConfirmLoading(true);\r\n    setIfCanceled(false);\r\n    setTimeout(() => {\r\n      setIsModalVisible(false);\r\n      setConfirmLoading(false);\r\n    }, 2000);\r\n  };\r\n\r\n  const handleDelete = (id) => {\r\n    setConfirmLoading(true);\r\n    setIfCanceled(false);\r\n    setTimeout(() => {\r\n      setIsModalVisible(false);\r\n      setConfirmLoading(false);\r\n    }, 2000);\r\n    //console.log(id);\r\n    axios\r\n      .delete(\"/api/v1/images/delete_image\", {\r\n        params: {\r\n          id,\r\n          referenceId: 1,\r\n        },\r\n      })\r\n      .then((res) => {\r\n        let imagesCopy = [...images];\r\n        imagesCopy = imagesCopy.filter(\r\n          (imagesCopy) =>\r\n            imagesCopy.imageOwnerId !== id && imagesCopy.imageReferenceId === 2\r\n        );\r\n        setImages(imagesCopy);\r\n        console.log(imagesCopy);\r\n      })\r\n      .catch((error) => console.log(error));\r\n\r\n    axios\r\n      .delete(\"/api/v1/drivers/delete_driver\", {\r\n        params: {\r\n          id,\r\n        },\r\n      })\r\n      .then((res) => {\r\n        let driversCopy = [...drivers];\r\n        driversCopy = driversCopy.filter((driver) => driver.id !== id);\r\n        setDrivers(driversCopy);\r\n        //console.log(driversCopy);\r\n\r\n        Modal.success({\r\n          content: \"Driver has been Removed\",\r\n        });\r\n      })\r\n      .catch((error) => console.log(error));\r\n  };\r\n\r\n  const handleCancel = () => {\r\n    setIfCanceled(true);\r\n    setIsModalVisible(false);\r\n  };\r\n  const handleClose = () => {\r\n    if (ifCanceled) {\r\n    } else {\r\n      props.afterClosing();\r\n    }\r\n  };\r\n\r\n  const handleDeleteImage = (id) => {\r\n    axios\r\n      .delete(\"/api/v1/images/delete_image\", {\r\n        params: {\r\n          id,\r\n          referenceId: 1,\r\n        },\r\n      })\r\n      .then((res) => {\r\n        let imagesCopy = [...images];\r\n        imagesCopy = imagesCopy.filter((image) => image.id !== id);\r\n        setImages(imagesCopy);\r\n        Modal.success({\r\n          content: \"Driver image has been removed\",\r\n        });\r\n      })\r\n      .catch((error) => console.log(error));\r\n  };\r\n  return (\r\n    <div>\r\n      <Button type=\"primary\" onClick={showModal}>\r\n        View\r\n      </Button>\r\n      <Modal\r\n        title=\"Driver Information\"\r\n        visible={isModalVisible}\r\n        confirmLoading={confirmLoading}\r\n        onOk={handleOk}\r\n        onCancel={handleCancel}\r\n        afterClose={handleClose}\r\n        footer={[\r\n          <Button\r\n            loading={confirmLoading}\r\n            onClick={() => handleDelete(props.info.id)}\r\n            danger\r\n          >\r\n            Remove\r\n          </Button>,\r\n        ]}\r\n      >\r\n        <p>\r\n          <h3>ID:</h3>\r\n          {props.info.id}\r\n        </p>\r\n        <p>\r\n          <h3>Name:</h3>\r\n          {props.info.firstName} {props.info.middleName} {props.info.lastName}\r\n        </p>\r\n        <p>\r\n          <h3>Contact Number:</h3>\r\n          {props.info.contactNumber}\r\n        </p>\r\n        <p>\r\n          <h3>Address: </h3>\r\n          {props.info.address}\r\n        </p>\r\n        <p>\r\n          <h3>Email Address: </h3>\r\n          {props.info.email}\r\n        </p>\r\n        <h3>Uploaded Images: </h3>\r\n        <Card className=\"shadow-sm\">\r\n          {images.map((image, index) => (\r\n            <Col key={index} md={{ span: 6 }}>\r\n              <Row>\r\n                <Image\r\n                  height={100}\r\n                  src={`/api/v1/images/${\r\n                    image.imagePath ? image.imagePath : \"logo.png\"\r\n                  }`}\r\n                  style={{ borderColor: \"white\", border: \"10px\" }}\r\n                />\r\n                <Button onClick={() => handleDeleteImage(image.id)} danger>\r\n                  Delete\r\n                </Button>\r\n              </Row>\r\n            </Col>\r\n          ))}\r\n        </Card>\r\n      </Modal>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default DriversInfoModal;\r\n","import React, { useState } from \"react\";\r\nimport { Form, Input, Modal, Button, Upload, Space } from \"antd\";\r\nimport { UploadOutlined } from \"@ant-design/icons\";\r\nimport axios from \"axios\";\r\n\r\nfunction AddDriverModal(props) {\r\n  const [isModalVisible, setIsModalVisible] = useState(false);\r\n  const [confirmLoading, setConfirmLoading] = useState(false);\r\n  const [ifCanceled, setIfCanceled] = useState(false);\r\n  const [drivers, setDrivers] = useState([]);\r\n  const [file, setFile] = useState({});\r\n  const [filename, setFilename] = useState(\"Choose file\");\r\n  const [uploadedImagePath, setUploadedImagePath] = useState();\r\n\r\n  const checking = (file) => {\r\n    setFilename(file);\r\n    //console.log(filename);\r\n  };\r\n  const unchecking = () => {\r\n    setFilename(\"Choose file\");\r\n    //console.log(filename);\r\n  };\r\n  const viewFile = () => {\r\n    if (filename == \"Choose file\") {\r\n      //console.log(\"No image selected\");\r\n    } else {\r\n      setUploadedImagePath(filename.file.response.filePath);\r\n      //console.log(filename.file.response);\r\n    }\r\n  };\r\n  const showModal = () => {\r\n    setIsModalVisible(true);\r\n    //console.log(props.info);\r\n  };\r\n\r\n  const handleCancel = () => {\r\n    setIfCanceled(true);\r\n    setIsModalVisible(false);\r\n  };\r\n  const handleClose = () => {\r\n    if (ifCanceled) {\r\n    } else {\r\n      props.afterClosing();\r\n    }\r\n  };\r\n\r\n  const onFinish = (values) => {\r\n    console.log(values);\r\n    props.passedData(props.info);\r\n    setConfirmLoading(true);\r\n    setIfCanceled(false);\r\n    setTimeout(() => {\r\n      setIsModalVisible(false);\r\n      setConfirmLoading(false);\r\n    }, 2000);\r\n\r\n    axios\r\n      .post(\"/api/v1/drivers/add_driver\", values)\r\n      .then((res) => {\r\n        // let driversCopy = [...drivers];\r\n        // driversCopy = [...driversCopy, res.data];\r\n        // //console.log(driversCopy);\r\n        // setDrivers(driversCopy);\r\n        // setFilename(file);\r\n        Modal.success({\r\n          content: \"Successfully Added New Driver\",\r\n        });\r\n        // setUploadedImagePath(filename.file.response.filePath);\r\n        // //console.log(uploadedImagePath);\r\n        // axios.post(\"/api/v1/images/save_image\", {\r\n        //   imageOwnerId: res.data.id,\r\n        //   imageReferenceId: 1,\r\n        //   imagePath: uploadedImagePath,\r\n        // });\r\n      })\r\n      .catch((error) => console.log(error));\r\n  };\r\n\r\n  const onFinishFailed = (errorInfo) => {\r\n    Modal.error({\r\n      content: \"Failure to Add New Driver\",\r\n    });\r\n    setTimeout(() => {\r\n      setIsModalVisible(true);\r\n      setConfirmLoading(false);\r\n    }, 2000);\r\n    //console.log(\"Failed:\", errorInfo);\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <Button type=\"primary\" onClick={showModal}>\r\n        Add Driver\r\n      </Button>\r\n\r\n      <Modal\r\n        title=\"Add Driver:\"\r\n        visible={isModalVisible}\r\n        confirmLoading={confirmLoading}\r\n        onOk={onFinish}\r\n        onCancel={handleCancel}\r\n        afterClose={handleClose}\r\n        destroyOnClose={true}\r\n        footer={[\r\n          <Button key=\"back\" onClick={handleCancel}>\r\n            Cancel\r\n          </Button>,\r\n          <Button\r\n            form=\"myForm\"\r\n            key=\"submit\"\r\n            htmlType=\"submit\"\r\n            type=\"primary\"\r\n            loading={confirmLoading}\r\n            onClick={onFinish}\r\n          >\r\n            Add\r\n          </Button>,\r\n        ]}\r\n      >\r\n        <Form\r\n          layout=\"vertical\"\r\n          name=\"basic\"\r\n          initialValues={{ remember: true }}\r\n          onFinish={onFinish}\r\n          onFinishFailed={onFinishFailed}\r\n          id=\"myForm\"\r\n        >\r\n          <Form.Item\r\n            label=\"First Name\"\r\n            name=\"firstName\"\r\n            rules={[\r\n              { required: true, message: \"Please input your Firstname!\" },\r\n            ]}\r\n          >\r\n            <Input />\r\n          </Form.Item>\r\n\r\n          <Form.Item\r\n            label=\"Middle Name\"\r\n            name=\"middleName\"\r\n            rules={[\r\n              { required: true, message: \"Please input your Middlename!\" },\r\n            ]}\r\n          >\r\n            <Input />\r\n          </Form.Item>\r\n\r\n          <Form.Item\r\n            label=\"Last Name\"\r\n            name=\"lastName\"\r\n            rules={[{ required: true, message: \"Please input your Lastname!\" }]}\r\n          >\r\n            <Input />\r\n          </Form.Item>\r\n\r\n          <Form.Item\r\n            label=\"Address\"\r\n            name=\"address\"\r\n            rules={[{ required: true, message: \"Please input your Address!\" }]}\r\n          >\r\n            <Input />\r\n          </Form.Item>\r\n\r\n          <Form.Item\r\n            label=\"Contact Number\"\r\n            name=\"contactNumber\"\r\n            rules={[\r\n              { required: true, message: \"Please input your Contact Number!\" },\r\n            ]}\r\n          >\r\n            <Input />\r\n          </Form.Item>\r\n\r\n          <Form.Item\r\n            label=\"Generate Password\"\r\n            name=\"generatePassword\"\r\n            rules={[{ required: true, message: \"Please input your password!\" }]}\r\n          >\r\n            <Input />\r\n          </Form.Item>\r\n\r\n          <Form.Item\r\n            label=\"Email\"\r\n            name=\"email\"\r\n            rules={[\r\n              {\r\n                required: true,\r\n                type: \"email\",\r\n                message: \"Please input your Email!\",\r\n              },\r\n            ]}\r\n          >\r\n            <Input />\r\n          </Form.Item>\r\n          {/* <Upload\r\n            action=\"/api/v1/images/add_image\"\r\n            listType=\"picture\"\r\n            maxCount={1}\r\n            file={file}\r\n            onChange={checking}\r\n            onRemove={unchecking}\r\n          >\r\n            <Button>Choose Image (Max: 1)</Button>\r\n          </Upload>\r\n          <Space>\r\n            <Button onClick={viewFile} icon={<UploadOutlined />}>\r\n              Upload\r\n            </Button>\r\n          </Space> */}\r\n        </Form>\r\n      </Modal>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default AddDriverModal;\r\n","import React, { Suspense, useEffect, useState } from \"react\";\r\nimport { Table, Tag, Space, Input, Row, Col, Button, Divider } from \"antd\";\r\nimport axios from \"axios\";\r\nimport Column from \"antd/lib/table/Column\";\r\nimport ColumnGroup from \"antd/lib/table/ColumnGroup\";\r\nimport DriversInfoModal from \"./DriversInfoModal\";\r\nimport AddDriverModal from \"./AddDriverModal\";\r\n\r\nfunction DriversTableList() {\r\n  const [drivers, setDrivers] = useState([]);\r\n  const { Search } = Input;\r\n  const [dataFromModal, setDataFromModal] = useState(\"\");\r\n\r\n  useEffect(() => {\r\n    axios\r\n      .get(\"/api/v1/drivers/\")\r\n      .then((res) => {\r\n        // console.log(res);\r\n        let data = res.data;\r\n        setDrivers(data);\r\n      })\r\n      .catch((error) => console.log(error));\r\n  }, []);\r\n\r\n  const onSearch = (value) => {\r\n    axios\r\n      .post(\"/api/v1/drivers/search_drivers\", { value: value })\r\n      .then((_res) => {\r\n        console.log(_res);\r\n        let data = _res.data;\r\n        setDrivers(data);\r\n        //console.log(\"success\");\r\n      });\r\n\r\n    //console.log(value);\r\n  };\r\n\r\n  const modalClosed = () => {\r\n    console.log(\"Passed data from modal\", dataFromModal);\r\n    axios.get(\"/api/v1/drivers/\").then((res) => {\r\n      //console.log(res);\r\n\r\n      let data = res.data;\r\n      setDrivers(data);\r\n    });\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <Row justify=\"space-between\">\r\n        <Col span={4}>\r\n          <Space direction=\"vertical\">\r\n            <Search\r\n              placeholder=\"Search Drivers\"\r\n              onSearch={onSearch}\r\n              allowClear={true}\r\n              enterButton\r\n            />\r\n          </Space>\r\n        </Col>\r\n        <Col span={4}>\r\n          <AddDriverModal\r\n            info={\"\"}\r\n            passedData={setDataFromModal}\r\n            afterClosing={modalClosed}\r\n          />\r\n        </Col>\r\n      </Row>\r\n      <Divider orientation=\"center\">List of Drivers</Divider>\r\n      <Row>\r\n        <Table dataSource={drivers} scroll={{ x: 1000, y: 500 }} sticky>\r\n          {/* <ColumnGroup title=\"Id\" dataIndex=\"id\" key=\"id\"></ColumnGroup> */}\r\n          {/* <ColumnGroup title=\"Name\" key=\"name\"> */}\r\n          <Column\r\n            title=\"Firstname\"\r\n            dataIndex=\"firstName\"\r\n            key=\"firstName\"\r\n          ></Column>\r\n          <Column\r\n            title=\"Middlename\"\r\n            dataIndex=\"middleName\"\r\n            key=\"middleName\"\r\n          ></Column>\r\n          <Column title=\"Lastname\" dataIndex=\"lastName\" key=\"lastName\"></Column>\r\n          {/* </ColumnGroup> */}\r\n          <ColumnGroup\r\n            title=\"Contact\"\r\n            dataIndex=\"contactNumber\"\r\n            key=\"contactNumber\"\r\n          ></ColumnGroup>\r\n          <ColumnGroup\r\n            title=\"Address\"\r\n            dataIndex=\"address\"\r\n            key=\"address\"\r\n          ></ColumnGroup>\r\n          <ColumnGroup\r\n            title=\"Email\"\r\n            dataIndex=\"email\"\r\n            key=\"email\"\r\n          ></ColumnGroup>\r\n          <ColumnGroup\r\n            title=\"Actions\"\r\n            key=\"actions\"\r\n            fixed=\"right\"\r\n            render={(value) => (\r\n              <Space>\r\n                <DriversInfoModal\r\n                  info={value}\r\n                  passedData={setDataFromModal}\r\n                  afterClosing={modalClosed}\r\n                />\r\n              </Space>\r\n            )}\r\n          ></ColumnGroup>\r\n        </Table>\r\n      </Row>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default DriversTableList;\r\n"],"sourceRoot":""}