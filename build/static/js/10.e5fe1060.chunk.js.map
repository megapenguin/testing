{"version":3,"sources":["components/DriversTableList/DriversInfoModal.js","components/DriversTableList/AddDriverModal.js","components/DriversTableList/AddDriverImageModal.js","components/DriversTableList/EditDriverModal.js","components/DriversTableList/DriversTableList.js"],"names":["DriversInfoModal","props","useState","isModalVisible","setIsModalVisible","confirmLoading","setConfirmLoading","ifCanceled","setIfCanceled","images","setImages","type","className","onClick","axios","post","imageOwnerId","info","id","imageReferenceId","then","res","data","catch","error","console","log","UnorderedListOutlined","title","visible","onOk","passedData","setTimeout","onCancel","afterClose","afterClosing","footer","loading","success","content","danger","firstName","middleName","lastName","contactNumber","address","email","map","image","index","md","span","height","width","src","imagePath","delete","params","fileName","fileId","imagesCopy","filter","handleDeleteImage","AddDriverModal","handleCancel","onFinish","values","PlusOutlined","destroyOnClose","form","htmlType","layout","name","initialValues","remember","onFinishFailed","errorInfo","Item","label","rules","required","message","AddDriverImageModal","setFilename","uploadedImagePath","setUploadedImagePath","uploadImageStatus","setUploadImageStatus","useForm","uploadFile","action","headers","authorization","onChange","file","status","fileList","setFieldsValue","UploadOutlined","itemLayout","style","size","onRemove","val","response","listType","showUploadList","showPreviewIcon","maxCount","EditDriverModal","ifChanged","setIfChanged","EditOutlined","onValuesChange","changedValues","allValues","disabled","bordered","DriversTableList","drivers","setDrivers","Search","dataFromModal","setDataFromModal","Title","useEffect","get","modalClosed","class","justify","direction","placeholder","onSearch","value","_res","allowClear","enterButton","level","dataSource","scroll","x","y","sticky","dataIndex","fixed","render"],"mappings":"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","file":"static/js/10.e5fe1060.chunk.js","sourcesContent":["import React, { useState } from \"react\";\r\nimport { Modal, Button, Image, Card, Col, Row } from \"antd\";\r\nimport { UnorderedListOutlined } from \"@ant-design/icons\";\r\nimport axios from \"axios\";\r\n\r\nfunction DriversInfoModal(props) {\r\n  const [isModalVisible, setIsModalVisible] = useState(false);\r\n  const [modalValue, setModalValue] = useState(\"\");\r\n  const [confirmLoading, setConfirmLoading] = useState(false);\r\n  const [ifCanceled, setIfCanceled] = useState(false);\r\n  const [drivers, setDrivers] = useState([]);\r\n  const [images, setImages] = useState([]);\r\n  const [imagePath, setImagePath] = useState([]);\r\n\r\n  const showModal = () => {\r\n    setIsModalVisible(true);\r\n    axios\r\n      .post(\"/api/v1/images/search_images\", {\r\n        imageOwnerId: props.info.id,\r\n        imageReferenceId: 2,\r\n      })\r\n      .then((res) => {\r\n        let data = res.data;\r\n        setImages(data);\r\n      })\r\n      .catch((error) => console.log(error));\r\n  };\r\n\r\n  const handleOk = () => {\r\n    props.passedData(props.info);\r\n\r\n    setConfirmLoading(true);\r\n    setIfCanceled(false);\r\n    setTimeout(() => {\r\n      setIsModalVisible(false);\r\n      setConfirmLoading(false);\r\n    }, 2000);\r\n  };\r\n\r\n  const handleDelete = (id) => {\r\n    setConfirmLoading(true);\r\n    setIfCanceled(false);\r\n    setTimeout(() => {\r\n      setIsModalVisible(false);\r\n      setConfirmLoading(false);\r\n    }, 2000);\r\n    Modal.success({\r\n      content: \"Still in development\",\r\n    });\r\n    //console.log(id);\r\n    // axios\r\n    //   .delete(\"/api/v1/images/delete_image\", {\r\n    //     params: {\r\n    //       id,\r\n    //       referenceId: 1,\r\n    //     },\r\n    //   })\r\n    //   .then((res) => {\r\n    //     let imagesCopy = [...images];\r\n    //     imagesCopy = imagesCopy.filter(\r\n    //       (imagesCopy) =>\r\n    //         imagesCopy.imageOwnerId !== id && imagesCopy.imageReferenceId === 2\r\n    //     );\r\n    //     setImages(imagesCopy);\r\n    //     //console.log(imagesCopy);\r\n    //   })\r\n    //   .catch((error) => console.log(error));\r\n\r\n    // axios\r\n    //   .delete(\"/api/v1/drivers/delete_driver\", {\r\n    //     params: {\r\n    //       id,\r\n    //     },\r\n    //   })\r\n    //   .then((res) => {\r\n    //     let driversCopy = [...drivers];\r\n    //     driversCopy = driversCopy.filter((driver) => driver.id !== id);\r\n    //     setDrivers(driversCopy);\r\n    //     //console.log(driversCopy);\r\n\r\n    //     Modal.success({\r\n    //       content: \"Driver has been Removed\",\r\n    //     });\r\n    //   })\r\n    //   .catch((error) => console.log(error));\r\n  };\r\n\r\n  const handleCancel = () => {\r\n    setIfCanceled(true);\r\n    setIsModalVisible(false);\r\n  };\r\n  const handleClose = () => {\r\n    if (ifCanceled) {\r\n    } else {\r\n      props.afterClosing();\r\n    }\r\n  };\r\n\r\n  const handleDeleteImage = (id, imagePath) => {\r\n    axios\r\n      .delete(\"/api/v1/images/delete_folder_image\", {\r\n        params: {\r\n          fileName: imagePath,\r\n          fileId: id,\r\n        },\r\n      })\r\n      .then((res) => {\r\n        let imagesCopy = [...images];\r\n        imagesCopy = imagesCopy.filter((image) => image.id !== id);\r\n        setImages(imagesCopy);\r\n        Modal.success({\r\n          content: \"Driver image has been removed\",\r\n        });\r\n      })\r\n      .catch((error) => console.log(error));\r\n  };\r\n  return (\r\n    <div>\r\n      <Button type=\"primary\" className=\"modal-button-view\" onClick={showModal}>\r\n        <span className=\"desktop-view\">\r\n          <UnorderedListOutlined /> View\r\n        </span>\r\n        <span className=\"mobile-view\">\r\n          <UnorderedListOutlined />\r\n        </span>\r\n      </Button>\r\n      <Modal\r\n        title=\"Driver Information\"\r\n        visible={isModalVisible}\r\n        confirmLoading={confirmLoading}\r\n        onOk={handleOk}\r\n        onCancel={handleCancel}\r\n        afterClose={handleClose}\r\n        footer={[\r\n          <Button\r\n            className=\"modal-button\"\r\n            loading={confirmLoading}\r\n            onClick={() => handleDelete(props.info.id)}\r\n            danger\r\n          >\r\n            Remove\r\n          </Button>,\r\n        ]}\r\n      >\r\n        <p>\r\n          <h4>ID:</h4>\r\n          {props.info.id}\r\n        </p>\r\n        <p>\r\n          <h4>Name:</h4>\r\n          {props.info.firstName} {props.info.middleName} {props.info.lastName}\r\n        </p>\r\n        <p>\r\n          <h4>Contact Number:</h4>\r\n          {props.info.contactNumber}\r\n        </p>\r\n        <p>\r\n          <h4>Address: </h4>\r\n          {props.info.address}\r\n        </p>\r\n        <p>\r\n          <h4>Email Address: </h4>\r\n          {props.info.email}\r\n        </p>\r\n        <h4>Uploaded Images: </h4>\r\n        <Card className=\"shadow-sm\">\r\n          <Row>\r\n            {images.map((image, index) => (\r\n              <Col key={index} md={{ span: 6 }}>\r\n                <br></br>\r\n                <Image\r\n                  height={100}\r\n                  width={100}\r\n                  src={`/api/v1/images/${\r\n                    image.imagePath ? image.imagePath : \"logo.png\"\r\n                  }`}\r\n                />\r\n                <Row>\r\n                  <br></br>\r\n                  <Button\r\n                    onClick={() => handleDeleteImage(image.id, image.imagePath)}\r\n                    danger\r\n                  >\r\n                    Delete\r\n                  </Button>\r\n                </Row>\r\n              </Col>\r\n            ))}\r\n          </Row>\r\n        </Card>\r\n      </Modal>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default DriversInfoModal;\r\n","import React, { useState } from \"react\";\r\nimport { Form, Input, Modal, Button, Upload, Space } from \"antd\";\r\nimport { PlusOutlined } from \"@ant-design/icons\";\r\nimport axios from \"axios\";\r\n\r\nfunction AddDriverModal(props) {\r\n  const [isModalVisible, setIsModalVisible] = useState(false);\r\n  const [confirmLoading, setConfirmLoading] = useState(false);\r\n  const [ifCanceled, setIfCanceled] = useState(false);\r\n  const [drivers, setDrivers] = useState([]);\r\n  const [file, setFile] = useState({});\r\n  const [filename, setFilename] = useState(\"Choose file\");\r\n  const [uploadedImagePath, setUploadedImagePath] = useState();\r\n\r\n  const checking = (file) => {\r\n    setFilename(file);\r\n    //console.log(filename);\r\n  };\r\n  const unchecking = () => {\r\n    setFilename(\"Choose file\");\r\n    //console.log(filename);\r\n  };\r\n  const viewFile = () => {\r\n    if (filename == \"Choose file\") {\r\n      //console.log(\"No image selected\");\r\n    } else {\r\n      setUploadedImagePath(filename.file.response.filePath);\r\n      //console.log(filename.file.response);\r\n    }\r\n  };\r\n  const showModal = () => {\r\n    setIsModalVisible(true);\r\n    //console.log(props.info);\r\n  };\r\n\r\n  const handleCancel = () => {\r\n    setIfCanceled(true);\r\n    setIsModalVisible(false);\r\n  };\r\n  const handleClose = () => {\r\n    if (ifCanceled) {\r\n    } else {\r\n      props.afterClosing();\r\n    }\r\n  };\r\n\r\n  const onFinish = (values) => {\r\n    console.log(values);\r\n    props.passedData(props.info);\r\n    setConfirmLoading(true);\r\n    setIfCanceled(false);\r\n    setTimeout(() => {\r\n      setIsModalVisible(false);\r\n      setConfirmLoading(false);\r\n    }, 2000);\r\n\r\n    axios\r\n      .post(\"/api/v1/drivers/add_driver\", values)\r\n      .then((res) => {\r\n        // let driversCopy = [...drivers];\r\n        // driversCopy = [...driversCopy, res.data];\r\n        // //console.log(driversCopy);\r\n        // setDrivers(driversCopy);\r\n        // setFilename(file);\r\n        Modal.success({\r\n          content: \"Successfully Added New Driver\",\r\n        });\r\n        // setUploadedImagePath(filename.file.response.filePath);\r\n        // //console.log(uploadedImagePath);\r\n        // axios.post(\"/api/v1/images/save_image\", {\r\n        //   imageOwnerId: res.data.id,\r\n        //   imageReferenceId: 1,\r\n        //   imagePath: uploadedImagePath,\r\n        // });\r\n      })\r\n      .catch((error) => console.log(error));\r\n  };\r\n\r\n  const onFinishFailed = (errorInfo) => {\r\n    Modal.error({\r\n      content: \"Failure to Add New Driver\",\r\n    });\r\n    setTimeout(() => {\r\n      setIsModalVisible(true);\r\n      setConfirmLoading(false);\r\n    }, 2000);\r\n    //console.log(\"Failed:\", errorInfo);\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <Button type=\"primary\" className=\"modal-button-add\" onClick={showModal}>\r\n        <span className=\"desktop-view\"><PlusOutlined /> Add Driver</span>\r\n        <span className=\"mobile-view\"><PlusOutlined /></span>\r\n      </Button>\r\n\r\n      <Modal\r\n        title=\"Add Driver:\"\r\n        visible={isModalVisible}\r\n        confirmLoading={confirmLoading}\r\n        onOk={onFinish}\r\n        onCancel={handleCancel}\r\n        afterClose={handleClose}\r\n        destroyOnClose={true}\r\n        footer={[\r\n          <Button key=\"back\" className=\"modal-button\"  onClick={handleCancel}>\r\n            Cancel\r\n          </Button>,\r\n          <Button\r\n            form=\"myForm\"\r\n            key=\"submit\"\r\n            htmlType=\"submit\"\r\n            type=\"primary\"\r\n            className=\"modal-button\" \r\n            loading={confirmLoading}\r\n            onClick={onFinish}\r\n          >\r\n            Add\r\n          </Button>,\r\n        ]}\r\n      >\r\n        <Form\r\n          layout=\"vertical\"\r\n          name=\"basic\"\r\n          initialValues={{ remember: true }}\r\n          onFinish={onFinish}\r\n          onFinishFailed={onFinishFailed}\r\n          id=\"myForm\"\r\n        >\r\n          <Form.Item\r\n            label=\"First Name\"\r\n            name=\"firstName\"\r\n            rules={[\r\n              { required: true, message: \"Please input your Firstname!\" },\r\n            ]}\r\n          >\r\n            <Input />\r\n          </Form.Item>\r\n\r\n          <Form.Item\r\n            label=\"Middle Name\"\r\n            name=\"middleName\"\r\n            rules={[\r\n              { required: true, message: \"Please input your Middlename!\" },\r\n            ]}\r\n          >\r\n            <Input />\r\n          </Form.Item>\r\n\r\n          <Form.Item\r\n            label=\"Last Name\"\r\n            name=\"lastName\"\r\n            rules={[{ required: true, message: \"Please input your Lastname!\" }]}\r\n          >\r\n            <Input />\r\n          </Form.Item>\r\n\r\n          <Form.Item\r\n            label=\"Address\"\r\n            name=\"address\"\r\n            rules={[{ required: true, message: \"Please input your Address!\" }]}\r\n          >\r\n            <Input />\r\n          </Form.Item>\r\n\r\n          <Form.Item\r\n            label=\"Contact Number\"\r\n            name=\"contactNumber\"\r\n            rules={[\r\n              { required: true, message: \"Please input your Contact Number!\" },\r\n            ]}\r\n          >\r\n            <Input />\r\n          </Form.Item>\r\n\r\n          <Form.Item\r\n            label=\"Generate Password\"\r\n            name=\"generatePassword\"\r\n            rules={[{ required: true, message: \"Please input your password!\" }]}\r\n          >\r\n            <Input />\r\n          </Form.Item>\r\n\r\n          <Form.Item\r\n            label=\"Email\"\r\n            name=\"email\"\r\n            rules={[\r\n              {\r\n                required: true,\r\n                type: \"email\",\r\n                message: \"Please input your Email!\",\r\n              },\r\n            ]}\r\n          >\r\n            <Input />\r\n          </Form.Item>\r\n          {/* <Upload\r\n            action=\"/api/v1/images/add_image\"\r\n            listType=\"picture\"\r\n            maxCount={1}\r\n            file={file}\r\n            onChange={checking}\r\n            onRemove={unchecking}\r\n          >\r\n            <Button>Choose Image (Max: 1)</Button>\r\n          </Upload>\r\n          <Space>\r\n            <Button onClick={viewFile} icon={<UploadOutlined />}>\r\n              Upload\r\n            </Button>\r\n          </Space> */}\r\n        </Form>\r\n      </Modal>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default AddDriverModal;\r\n","import React, { useState } from \"react\";\r\nimport {\r\n  Modal,\r\n  Upload,\r\n  Button,\r\n  Space,\r\n  Row,\r\n  Col,\r\n  List,\r\n  Form,\r\n  Radio,\r\n  Input,\r\n  message,\r\n} from \"antd\";\r\nimport { UploadOutlined } from \"@ant-design/icons\";\r\nimport axios from \"axios\";\r\nimport { Content } from \"antd/lib/layout/layout\";\r\n\r\nfunction AddDriverImageModal(props) {\r\n  const [file, setFile] = useState({});\r\n  const [imageStatus, setImageStatus] = useState(false);\r\n  const [filename, setFilename] = useState(\"Choose file\");\r\n  const [uploadedImagePath, setUploadedImagePath] = useState(\"\");\r\n  const [uploadImageStatus, setUploadImageStatus] = useState(\"none\");\r\n  const [fetchImage, setFetchImage] = useState(\"\");\r\n  const [images, setImages] = useState([]);\r\n  const [info, setInfo] = useState([]);\r\n  const [ifCanceled, setIfCanceled] = useState(false);\r\n  const [isModalVisible, setIsModalVisible] = useState(false);\r\n  const [form] = Form.useForm();\r\n  const [confirmLoading, setConfirmLoading] = useState(false);\r\n\r\n  const showModal = () => {\r\n    form.setFieldsValue({\r\n      imageOwnerId: props.info.id,\r\n      imageReferenceId: 2,\r\n    });\r\n    setUploadedImagePath();\r\n    setUploadImageStatus(\"removed\");\r\n    setFilename(\"Choose file\");\r\n    setIsModalVisible(true);\r\n    console.log(props.info);\r\n  };\r\n\r\n  const checking = (file) => {\r\n    setFilename(file);\r\n  };\r\n  const viewFile = () => {\r\n    {\r\n      (() => {\r\n        switch (uploadImageStatus) {\r\n          case \"done\":\r\n            return (\r\n              setUploadedImagePath(filename.file.response.filePath),\r\n              console.log(\"done\")\r\n            );\r\n\r\n          case \"removed\":\r\n            return console.log(\"removed\");\r\n\r\n          case \"\":\r\n            return console.log(\"none\");\r\n        }\r\n      })();\r\n    }\r\n  };\r\n\r\n  const handleOk = () => {\r\n    setIsModalVisible(false);\r\n  };\r\n\r\n  const handleCancel = () => {\r\n    setIfCanceled(true);\r\n\r\n    setTimeout(() => {\r\n      setIsModalVisible(false);\r\n      setConfirmLoading(false);\r\n    }, 500);\r\n  };\r\n\r\n  const handleClose = () => {\r\n    setConfirmLoading(true);\r\n    setIfCanceled(false);\r\n  };\r\n\r\n  const onFinish = (values) => {\r\n    if (uploadImageStatus == \"done\") {\r\n      axios\r\n        .post(\"/api/v1/images/save_image\", {\r\n          imageOwnerId: props.info.id,\r\n          imageReferenceId: 2,\r\n          imagePath: uploadedImagePath,\r\n        })\r\n        .then((res) => {\r\n          message.success(\"Successfully Saved\");\r\n          setTimeout(() => {\r\n            setIsModalVisible(false);\r\n            setConfirmLoading(false);\r\n          }, 500);\r\n          setUploadedImagePath(\"\");\r\n        })\r\n        .catch((error) => console.log(error));\r\n    } else {\r\n      message.error(\"Image Saving Error\");\r\n      // console.log(\"Uploaded image is removed\");\r\n    }\r\n  };\r\n\r\n  const onFinishFailed = (errorInfo) => {\r\n    console.log(\"fail\");\r\n    console.log(\"Failed:\", errorInfo);\r\n  };\r\n\r\n  const removeImage = (val) => {\r\n    //console.log(\"Removed image\", val.response.filePath);\r\n    axios\r\n      .delete(\"/api/v1/images/delete_folder_image\", {\r\n        params: {\r\n          fileName: val.response.imagePath,\r\n          fileId: val.response.id,\r\n        },\r\n      })\r\n      .then((res) => {\r\n        setUploadImageStatus(\"removed\");\r\n        // console.log(res.data);\r\n      })\r\n      .catch((error) => console.log(error));\r\n    setUploadedImagePath();\r\n    message.error(`File removed Successfully.`);\r\n  };\r\n\r\n  const uploadFile = {\r\n    name: \"file\",\r\n    action: \"/api/v1/images/add_image\",\r\n    headers: {\r\n      authorization: \"authorization-text\",\r\n    },\r\n    data: { imageOwnerId: props.info.id, imageReferenceId: 2 },\r\n    onChange(info) {\r\n      if (info.file.status !== \"uploading\") {\r\n        console.log(\"uploading\", info.file, info.fileList);\r\n      }\r\n      if (info.file.status === \"done\") {\r\n        message.success(`${info.file.name} file uploaded Successfully.`);\r\n      } else if (info.file.status === \"error\") {\r\n        message.error(`${info.file.name} file upload Failed.`);\r\n      }\r\n      setUploadImageStatus(info.file.status);\r\n      setFilename(info);\r\n    },\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <Button type=\"primary\" className=\"modal-button-upload\" onClick={showModal}>\r\n        <span className=\"desktop-view\"><UploadOutlined /> Upload</span>\r\n        <span className=\"mobile-view\"><UploadOutlined /></span>\r\n      </Button>\r\n      <Modal\r\n        title=\"Driver Image Upload\"\r\n        confirmLoading={confirmLoading}\r\n        visible={isModalVisible}\r\n        onOk={onFinish}\r\n        onCancel={handleCancel}\r\n        afterClose={handleClose}\r\n        destroyOnClose={true}\r\n        footer={[\r\n          <Button key=\"back\" className=\"modal-button\"  type=\"danger\" onClick={handleCancel}>\r\n            Close\r\n          </Button>,\r\n        ]}\r\n      >\r\n        <List itemLayout=\"vertical\">\r\n          <List.Item>\r\n          <h4>Image Driver ID: </h4>\r\n          {props.info.id}\r\n          </List.Item>\r\n          <List.Item>\r\n          <h4>Image Driver Name: </h4>\r\n          {props.info.firstName} {props.info.firstName} {props.info.firstName}\r\n          </List.Item>\r\n          <List.Item>\r\n          <h4>Image Reference Name: </h4>\r\n          Driver\r\n          </List.Item>\r\n        </List>\r\n        <Row>\r\n          <Space style={{ width: \"100%\" }} size=\"large\">\r\n            <Upload\r\n              {...uploadFile}\r\n              onRemove={removeImage}\r\n              listType=\"picture-card\"\r\n              showUploadList={{showPreviewIcon:false}}\r\n              maxCount={5}\r\n            >\r\n                <Space>\r\n                  <UploadOutlined/>\r\n               Upload\r\n               </Space>\r\n            </Upload>\r\n          </Space>\r\n        </Row>\r\n        {/* <Row>\r\n          <Form\r\n            name=\"basic\"\r\n            form={form}\r\n            layout={\"horizontal\"}\r\n            initialValues={{ remember: true }}\r\n            onFinish={onFinish}\r\n            onFinishFailed={onFinishFailed}\r\n          >\r\n            <Form.Item label=\"Image Owner ID: \" name=\"imageOwnerId\">\r\n               {props.info.id}\r\n            </Form.Item>\r\n            <Form.Item label=\"Image Reference: \" name=\"imageReferenceId\">\r\n               Barangay\r\n            </Form.Item>\r\n          </Form>\r\n        </Row> */}\r\n      </Modal>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default AddDriverImageModal;\r\n","import React, { useState, useEffect } from \"react\";\r\nimport { Modal, Button, Form, Input } from \"antd\";\r\nimport axios from \"axios\";\r\nimport { EditOutlined  } from \"@ant-design/icons\";\r\n\r\nfunction EditDriverModal(props) {\r\n  const [isModalVisible, setIsModalVisible] = useState(false);\r\n  const [form] = Form.useForm();\r\n  const [confirmLoading, setConfirmLoading] = useState(false);\r\n  const [ifCanceled, setIfCanceled] = useState(false);\r\n  const [ifChanged, setIfChanged] = useState();\r\n\r\n  const showModal = () => {\r\n    form.setFieldsValue({\r\n      id: props.info.id,\r\n      firstName: props.info.firstName,\r\n      middleName: props.info.middleName,\r\n      lastName: props.info.lastName,\r\n      address: props.info.address,\r\n      contactNumber: props.info.contactNumber,\r\n      email: props.info.email,\r\n    });\r\n    setIsModalVisible(true);\r\n    setIfChanged(false);\r\n  };\r\n\r\n  const handleOk = () => {\r\n    setIsModalVisible(false);\r\n  };\r\n\r\n  const handleCancel = () => {\r\n    setIfCanceled(true);\r\n    setIsModalVisible(false);\r\n  };\r\n  const handleClose = () => {\r\n    if (ifCanceled) {\r\n    } else {\r\n      props.afterClosing();\r\n    }\r\n  };\r\n\r\n  const onFinish = (values) => {\r\n    //console.log(ifChanged);\r\n    setConfirmLoading(true);\r\n    setIfCanceled(false);\r\n    props.passedData(props.info);\r\n\r\n    axios\r\n      .post(\"/api/v1/drivers/update_driver\", {\r\n        id: values.id,\r\n        firstName: values.firstName,\r\n        middleName: values.middleName,\r\n        lastName: values.lastName,\r\n        address: values.address,\r\n        contactNumber: values.contactNumber,\r\n        email: values.email,\r\n      })\r\n      .then((res) => {\r\n        setTimeout(() => {\r\n          setIsModalVisible(false);\r\n          setConfirmLoading(false);\r\n        }, 2000);\r\n        {\r\n          ifChanged\r\n            ? Modal.success({\r\n                content: \"Successfully Updated Driver Info\",\r\n              })\r\n            : Modal.success({\r\n                content: \"Driver Info is up to date\",\r\n              });\r\n        }\r\n      })\r\n      .catch((error) => console.log(error));\r\n\r\n    //console.log(ifChanged);\r\n  };\r\n\r\n  const onFinishFailed = (errorInfo) => {\r\n    Modal.error({\r\n      content: \"Failure to Update Driver Info\",\r\n    });\r\n    setTimeout(() => {\r\n      setIsModalVisible(true);\r\n      setConfirmLoading(false);\r\n    }, 2000);\r\n    // console.log(\"Failed:\", errorInfo);\r\n  };\r\n  const onValuesChange = (changedValues, allValues) => {\r\n    //console.log(\"Changed\", allValues, changedValues);\r\n    setIfChanged(true);\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <Button type=\"primary\" className=\"modal-button-edit\" onClick={showModal}>\r\n        <span className=\"desktop-view\"><EditOutlined /> Edit</span>\r\n        <span className=\"mobile-view\"><EditOutlined /></span>\r\n      </Button>\r\n      <Modal\r\n        title=\"Update Driver Info\"\r\n        confirmLoading={confirmLoading}\r\n        visible={isModalVisible}\r\n        onOk={onFinish}\r\n        onCancel={handleCancel}\r\n        afterClose={handleClose}\r\n        destroyOnClose={true}\r\n        footer={[\r\n          <Button key=\"back\" className=\"modal-button\" onClick={handleCancel}>\r\n            Cancel\r\n          </Button>,\r\n          <Button form=\"myForm\" className=\"modal-button\" htmlType=\"submit\" type=\"primary\">\r\n            Update\r\n          </Button>,\r\n        ]}\r\n      >\r\n        <Form\r\n          layout=\"vertical\"\r\n          name=\"basic\"\r\n          form={form}\r\n          initialValues={{ remember: true }}\r\n          onFinish={onFinish}\r\n          onFinishFailed={onFinishFailed}\r\n          onValuesChange={onValuesChange}\r\n          id=\"myForm\"\r\n        >\r\n          <Form.Item label=\"Driver ID:\" name=\"id\">\r\n            <Input disabled={true} bordered={false} />\r\n          </Form.Item>\r\n          <Form.Item\r\n            label=\"Firstname:\"\r\n            name=\"firstName\"\r\n            rules={[\r\n              { required: true, message: \"Please input Firstname!\" },\r\n            ]}\r\n          >\r\n            <Input />\r\n          </Form.Item>\r\n\r\n          <Form.Item\r\n            label=\"Middlename:\"\r\n            name=\"middleName\"\r\n            rules={[\r\n              { required: true, message: \"Please input Middlename!\" },\r\n            ]}\r\n          >\r\n            <Input />\r\n          </Form.Item>\r\n          <Form.Item\r\n            label=\"Lastname:\"\r\n            name=\"lastName\"\r\n            rules={[\r\n              { required: true, message: \"Please input Lastname!\" },\r\n            ]}\r\n          >\r\n            <Input />\r\n          </Form.Item>\r\n          <Form.Item\r\n            label=\"Contact:\"\r\n            name=\"contactNumber\"\r\n            rules={[\r\n              { required: true, message: \"Please input Contact Number!\" },\r\n            ]}\r\n          >\r\n            <Input />\r\n          </Form.Item>\r\n          <Form.Item\r\n            label=\"Address:\"\r\n            name=\"address\"\r\n            rules={[\r\n              { required: true, message: \"Please input the Address!\" },\r\n            ]}\r\n          >\r\n            <Input />\r\n          </Form.Item>\r\n          <Form.Item\r\n            label=\"Email:\"\r\n            name=\"email\"\r\n            rules={[\r\n              { required: true, message: \"Please input Email!\" },\r\n            ]}\r\n          >\r\n            <Input />\r\n          </Form.Item>\r\n        </Form>\r\n      </Modal>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default EditDriverModal;\r\n","import React, { useEffect, useState } from \"react\";\r\nimport { Table, Space, Input, Row, Col, Divider, Typography } from \"antd\";\r\nimport axios from \"axios\";\r\nimport Column from \"antd/lib/table/Column\";\r\nimport ColumnGroup from \"antd/lib/table/ColumnGroup\";\r\nimport DriversInfoModal from \"./DriversInfoModal\";\r\nimport AddDriverModal from \"./AddDriverModal\";\r\nimport AddDriverImageModal from \"./AddDriverImageModal\";\r\nimport EditDriverModal from \"./EditDriverModal\";\r\n\r\nfunction DriversTableList() {\r\n  const [drivers, setDrivers] = useState([]);\r\n  const { Search } = Input;\r\n  const [dataFromModal, setDataFromModal] = useState(\"\");\r\n  const { Title } = Typography;\r\n\r\n  useEffect(() => {\r\n    axios\r\n      .get(\"/api/v1/drivers/\")\r\n      .then((res) => {\r\n        // console.log(res);\r\n        let data = res.data;\r\n        setDrivers(data);\r\n      })\r\n      .catch((error) => console.log(error));\r\n  }, []);\r\n\r\n  const onSearch = (value) => {\r\n    axios\r\n      .post(\"/api/v1/drivers/search_drivers\", { value: value })\r\n      .then((_res) => {\r\n        console.log(_res);\r\n        let data = _res.data;\r\n        setDrivers(data);\r\n        //console.log(\"success\");\r\n      });\r\n\r\n    //console.log(value);\r\n  };\r\n\r\n  const modalClosed = () => {\r\n    console.log(\"Passed data from modal\", dataFromModal);\r\n    axios.get(\"/api/v1/drivers/\").then((res) => {\r\n      //console.log(res);\r\n\r\n      let data = res.data;\r\n      setDrivers(data);\r\n    });\r\n  };\r\n\r\n  return (\r\n    <div class=\"drivers-table\">\r\n\r\n      <Row justify=\"space-between\">\r\n        <Col span={4}>\r\n          <Space direction=\"vertical\">\r\n            <Search\r\n              placeholder=\"Search Drivers\"\r\n              onSearch={onSearch}\r\n              allowClear={true}\r\n              enterButton\r\n            />\r\n          </Space>\r\n        </Col>\r\n        <Col span={4}>\r\n          <AddDriverModal\r\n            info={\"\"}\r\n            passedData={setDataFromModal}\r\n            afterClosing={modalClosed}\r\n          />\r\n        </Col>\r\n      </Row>\r\n      <Divider>\r\n        <Title level={4}>List of Drivers</Title>\r\n      </Divider>\r\n\r\n      \r\n      <Row>\r\n        <Table dataSource={drivers} scroll={{ x: 1000, y: 500 }} sticky>\r\n          {/* <ColumnGroup title=\"Id\" dataIndex=\"id\" key=\"id\"></ColumnGroup> */}\r\n          {/* <ColumnGroup title=\"Name\" key=\"name\"> */}\r\n          <Column\r\n            title=\"Firstname\"\r\n            dataIndex=\"firstName\"\r\n            key=\"firstName\"\r\n          ></Column>\r\n          <Column\r\n            title=\"Middlename\"\r\n            dataIndex=\"middleName\"\r\n            key=\"middleName\"\r\n          ></Column>\r\n          <Column title=\"Lastname\" dataIndex=\"lastName\" key=\"lastName\"></Column>\r\n          {/* </ColumnGroup> */}\r\n          <ColumnGroup\r\n            title=\"Contact\"\r\n            dataIndex=\"contactNumber\"\r\n            key=\"contactNumber\"\r\n          ></ColumnGroup>\r\n          <ColumnGroup\r\n            title=\"Address\"\r\n            dataIndex=\"address\"\r\n            key=\"address\"\r\n          ></ColumnGroup>\r\n          <ColumnGroup\r\n            title=\"Email\"\r\n            dataIndex=\"email\"\r\n            key=\"email\"\r\n          ></ColumnGroup>\r\n          <ColumnGroup\r\n            title=\"Actions\"\r\n            key=\"actions\"\r\n            fixed=\"right\"\r\n            width=\"30vh\"\r\n            render={(value) => (\r\n              <Space>\r\n                <DriversInfoModal\r\n                  info={value}\r\n                  passedData={setDataFromModal}\r\n                  afterClosing={modalClosed}\r\n                />\r\n                <EditDriverModal\r\n                  info={value}\r\n                  passedData={setDataFromModal}\r\n                  afterClosing={modalClosed}\r\n                />\r\n                <AddDriverImageModal info={value} />\r\n              </Space>\r\n            )}\r\n          ></ColumnGroup>\r\n        </Table>\r\n      </Row>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default DriversTableList;\r\n"],"sourceRoot":""}