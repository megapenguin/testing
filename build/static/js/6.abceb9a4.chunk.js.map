{"version":3,"sources":["components/AssignJeepneyDriver/AssignJeepneyDriver.js"],"names":["AssignJeepneyDriver","useState","jeepneys","setJeepneys","info","setInfo","jeepId","setJeepId","drivers","setDrivers","selectedKey","setSelectedKey","ifSelected","setIfSelected","Text","Search","Title","useEffect","axios","get","then","res","data","map","d","jeepneydrivers","jeepneyId","catch","error","console","log","driverColumns","title","dataIndex","key","render","text","record","size","length","onClick","assignDriver","id","type","className","removeDriver","jeepData","jeepney","index","plateNumber","jeepCapacity","driverData","driver","firstName","middleName","lastName","email","address","contactNumber","rowSelection","onChange","selectedRowKeys","selectedRows","hideSelectAll","onSelect","selected","getCheckboxProps","disabled","post","driverId","success","content","delete","params","align","gutter","level","flex","bordered","columns","dataSource","scroll","x","y","layout","strong"],"mappings":"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","file":"static/js/6.abceb9a4.chunk.js","sourcesContent":["import React, { useState, useEffect } from \"react\";\r\nimport {\r\n  Table,\r\n  Space,\r\n  Input,\r\n  Row,\r\n  Col,\r\n  Divider,\r\n  Card,\r\n  Typography,\r\n  Button,\r\n  Form,\r\n  Modal,\r\n} from \"antd\";\r\nimport axios from \"axios\";\r\nimport { triggerFocus } from \"antd/lib/input/Input\";\r\n\r\nfunction AssignJeepneyDriver() {\r\n  const [jeepneys, setJeepneys] = useState([]);\r\n  const [info, setInfo] = useState([]);\r\n  const [counter, setCounter] = useState(0);\r\n  const [jeepId, setJeepId] = useState([]);\r\n  const [assignedJeepId, setAssignedJeepId] = useState([]);\r\n  const [drivers, setDrivers] = useState([]);\r\n  const [jeepneyDrivers, setJeepneyDrivers] = useState([]);\r\n  const [selectedKey, setSelectedKey] = useState();\r\n  const [ifSelected, setIfSelected] = useState();\r\n  const { Search } = Input;\r\n  const { Text, Title } = Typography;\r\n\r\n  useEffect(() => {\r\n    axios.get(\"/api/v1/jeepneys/\").then((res) => {\r\n      let data = res.data;\r\n      // data = data.map((d) => {\r\n      //   return { ...d, barangayName: d.barangay.barangayName };\r\n      // });\r\n\r\n      setJeepneys(data);\r\n    });\r\n\r\n    axios\r\n      .get(\"/api/v1/drivers/\")\r\n      .then((res) => {\r\n        let data = res.data;\r\n\r\n        data = data.map((d) => {\r\n          return {\r\n            ...d,\r\n            jeepId: d.jeepneydrivers.map((jeepneyId) => {\r\n              if (jeepneyId.jeepneyId) {\r\n                return jeepneyId.jeepneyId;\r\n              } else {\r\n                return \"none\";\r\n              }\r\n              //console.log(\"jeepneyID\", jeepneyId.jeepneyId);\r\n            }),\r\n          };\r\n        });\r\n\r\n        setDrivers(data);\r\n      })\r\n      .catch((error) => console.log(error));\r\n  }, []);\r\n\r\n  const plateColumns = [\r\n    {\r\n      title: \"Plate Number\",\r\n      dataIndex: \"plateNumber\",\r\n    },\r\n  ];\r\n\r\n  const driverColumns = [\r\n    {\r\n      title: \"Firstname\",\r\n      dataIndex: \"firstName\",\r\n    },\r\n\r\n    {\r\n      title: \"Middlename\",\r\n      dataIndex: \"middleName\",\r\n    },\r\n    { title: \"Lastname\", dataIndex: \"lastName\" },\r\n    {\r\n      title: \"Actions\",\r\n      key: \"action\",\r\n      render: (text, record) => (\r\n        <Space size=\"middle\">\r\n          {record.jeepId.length === 0 ? (\r\n            <Button\r\n              onClick={() => assignDriver(jeepId, record.id)}\r\n              type=\"primary\"\r\n              className=\"modal-button\"\r\n            >\r\n              Assign\r\n            </Button>\r\n          ) : (\r\n            <Button\r\n              onClick={() => removeDriver(record.id)}\r\n              type=\"danger\"\r\n              className=\"modal-button\"\r\n            >\r\n              Remove\r\n            </Button>\r\n          )}\r\n        </Space>\r\n      ),\r\n    },\r\n  ];\r\n  const jeepData = jeepneys.map((jeepney, index) => {\r\n    return {\r\n      key: index,\r\n      id: jeepney.id,\r\n      plateNumber: jeepney.plateNumber,\r\n      jeepCapacity: jeepney.jeepCapacity,\r\n    };\r\n  });\r\n  const driverData = drivers.map((driver, index) => {\r\n    return {\r\n      key: index,\r\n      id: driver.id,\r\n      jeepId: driver.jeepId,\r\n      firstName: driver.firstName,\r\n      middleName: driver.middleName,\r\n      lastName: driver.lastName,\r\n      email: driver.email,\r\n      address: driver.address,\r\n      contactNumber: driver.contactNumber,\r\n    };\r\n  });\r\n\r\n  const rowSelection = {\r\n    onChange: (selectedRowKeys, selectedRows) => {\r\n      // console.log(\r\n      //   `selectedRowKeys: ${selectedRowKeys}`,\r\n      //   \"selectedRows: \",\r\n      //   selectedRows\r\n      // );\r\n    },\r\n\r\n    hideSelectAll: true,\r\n\r\n    onSelect: (record, selected, selectedRows) => {\r\n      // console.log(\"selectedRows: \", record.id);\r\n      setSelectedKey(record.key);\r\n      setIfSelected(selected);\r\n      setJeepId(record.id);\r\n      setInfo(record);\r\n    },\r\n    getCheckboxProps: (record) => ({\r\n      disabled: record.key !== selectedKey && ifSelected === true, // Column configuration not to be checked\r\n    }),\r\n  };\r\n\r\n  const assignDriver = (jeepId, id) => {\r\n    if (ifSelected === true) {\r\n      axios\r\n        .post(\"/api/v1/jeepneydrivers/add_jeepney_driver\", {\r\n          driverId: id,\r\n          jeepneyId: jeepId,\r\n        })\r\n        .then((res) => {\r\n          axios.get(\"/api/v1/drivers/\").then((res) => {\r\n            let data = res.data;\r\n            data = data.map((d) => {\r\n              return {\r\n                ...d,\r\n                jeepId: d.jeepneydrivers.map((jeepneyId) => {\r\n                  return jeepneyId.jeepneyId;\r\n                  //console.log(\"jeepneyID\", jeepneyId.jeepneyId);\r\n                }),\r\n              };\r\n            });\r\n            setDrivers(data);\r\n            Modal.success({\r\n              content: \"Successfully Assigned Driver\",\r\n            });\r\n          });\r\n        })\r\n        .catch((error) => console.log(error));\r\n    } else {\r\n      Modal.error({\r\n        content: \"Select a jeepney\",\r\n      });\r\n    }\r\n  };\r\n\r\n  const removeDriver = (id) => {\r\n    axios\r\n      .delete(\"/api/v1/jeepneydrivers/delete_jeepney_driver\", {\r\n        params: {\r\n          driverId: id,\r\n        },\r\n      })\r\n      .then((res) => {\r\n        axios.get(\"/api/v1/drivers/\").then((res) => {\r\n          let data = res.data;\r\n          data = data.map((d) => {\r\n            return {\r\n              ...d,\r\n              jeepId: d.jeepneydrivers.map((jeepneyId) => {\r\n                return jeepneyId.jeepneyId;\r\n                //console.log(\"jeepneyID\", jeepneyId.jeepneyId);\r\n              }),\r\n            };\r\n          });\r\n          setDrivers(data);\r\n          Modal.success({\r\n            content: \"Successfully Removed Driver from Assigned Jeepney\",\r\n          });\r\n        });\r\n      })\r\n      .catch((error) => console.log(error));\r\n  };\r\n  return (\r\n    <div>\r\n      <Row align=\"top\" gutter={32}>\r\n        <Divider>\r\n          <Title level={2}>Assign Drivers</Title>\r\n        </Divider>\r\n        <Col flex=\"300px\">\r\n          <Card bordered={false}>\r\n            <Title level={5}>Select Jeepney</Title>\r\n            <Table\r\n              rowSelection={rowSelection}\r\n              columns={plateColumns}\r\n              dataSource={jeepData}\r\n              scroll={{ x: 300, y: 500 }}\r\n            />\r\n          </Card>\r\n        </Col>\r\n        <Col flex=\"auto\">\r\n          <Card title=\"Jeepney Info\" bordered={false}>\r\n            <Form layout=\"vertical\">\r\n              <Text strong>ID:</Text>\r\n              <p>{info.id}</p>\r\n\r\n              <Text strong>Plate Number:</Text>\r\n              <p>{info.plateNumber}</p>\r\n              <Text strong>Jeep Capacity:</Text>\r\n              <p>{info.jeepCapacity}</p>\r\n            </Form>\r\n          </Card>\r\n        </Col>\r\n      </Row>\r\n      <Divider>Drivers</Divider>\r\n      <Row gutter={16}>\r\n        <Col>\r\n          <Card bordered={false}>\r\n            <Table\r\n              columns={driverColumns}\r\n              dataSource={driverData}\r\n              scroll={{ y: 500 }}\r\n            ></Table>\r\n          </Card>\r\n        </Col>\r\n      </Row>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default AssignJeepneyDriver;\r\n"],"sourceRoot":""}