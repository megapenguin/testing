{"version":3,"sources":["components/JeepneysTableList/JeepneysInfoModal.js","components/JeepneysTableList/AddJeepneyModal.js","components/JeepneysTableList/EditJeepneyModal.js","components/JeepneysTableList/AddJeepneyImageModal.js","components/JeepneysTableList/JeepneysTableList.js"],"names":["JeepneysInfoModal","props","useState","isModalVisible","setIsModalVisible","confirmLoading","setConfirmLoading","ifCanceled","setIfCanceled","jeepneys","setJeepneys","images","setImages","type","className","onClick","axios","post","imageOwnerId","info","id","imageReferenceId","then","res","data","catch","error","console","log","UnorderedListOutlined","title","visible","onOk","passedData","setTimeout","onCancel","afterClose","afterClosing","footer","loading","delete","params","referenceId","imagesCopy","filter","jeepneysCopy","jeepney","success","content","danger","barangayId","plateNumber","jeepCapacity","map","image","index","md","span","height","width","src","imagePath","AddJeepneyModal","file","setFilename","uploadedImagePath","barangays","setBarangays","useEffect","get","Option","handleCancel","onFinish","values","PlusOutlined","destroyOnClose","form","htmlType","layout","name","initialValues","remember","onFinishFailed","errorInfo","Item","label","rules","required","message","placeholder","style","onChange","value","barangay","barangayName","action","listType","maxCount","icon","UploadOutlined","EditJeepneyModal","useForm","ifChanged","setIfChanged","setFieldsValue","EditOutlined","onValuesChange","changedValues","allValues","AddJeepneyImageModal","setUploadedImagePath","uploadImageStatus","setUploadImageStatus","uploadFile","headers","authorization","status","fileList","itemLayout","size","onRemove","val","fileName","response","fileId","showUploadList","showPreviewIcon","JeepneysTableList","Search","dataFromModal","setDataFromModal","d","modalClosed","justify","direction","onSearch","_res","allowClear","enterButton","orientation","dataSource","scroll","x","y","sticky","dataIndex","fixed","render"],"mappings":"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","file":"static/js/8.9441370a.chunk.js","sourcesContent":["import React, { useState, useEffect } from \"react\";\r\nimport { Modal, Button, Card, Image, Space, Col, Row } from \"antd\";\r\nimport { UnorderedListOutlined  } from \"@ant-design/icons\";\r\nimport axios from \"axios\";\r\n\r\nfunction JeepneysInfoModal(props) {\r\n  const [isModalVisible, setIsModalVisible] = useState(false);\r\n  const [confirmLoading, setConfirmLoading] = useState(false);\r\n  const [ifCanceled, setIfCanceled] = useState(false);\r\n  const [jeepneys, setJeepneys] = useState([]);\r\n  const [images, setImages] = useState([]);\r\n  const [imagePath, setImagePath] = useState([]);\r\n\r\n  const showModal = () => {\r\n    setIsModalVisible(true);\r\n    axios\r\n      .post(\"/api/v1/images/search_images\", {\r\n        imageOwnerId: props.info.id,\r\n        imageReferenceId: 3,\r\n      })\r\n      .then((res) => {\r\n        let data = res.data;\r\n        setImages(data);\r\n      })\r\n      .catch((error) => console.log(error));\r\n  };\r\n\r\n  const handleOk = () => {\r\n    props.passedData(props.info);\r\n    setConfirmLoading(true);\r\n    setIfCanceled(false);\r\n    setTimeout(() => {\r\n      setIsModalVisible(false);\r\n      setConfirmLoading(false);\r\n    }, 2000);\r\n  };\r\n\r\n  const handleDelete = (id) => {\r\n    setConfirmLoading(true);\r\n    setIfCanceled(false);\r\n    setTimeout(() => {\r\n      setIsModalVisible(false);\r\n      setConfirmLoading(false);\r\n    }, 2000);\r\n    axios\r\n      .delete(\"/api/v1/images/delete_image\", {\r\n        params: {\r\n          id,\r\n          referenceId: 3,\r\n        },\r\n      })\r\n      .then((res) => {\r\n        let imagesCopy = [...images];\r\n        imagesCopy = imagesCopy.filter(\r\n          (imagesCopy) =>\r\n            imagesCopy.imageOwnerId !== id && imagesCopy.imageReferenceId === 3\r\n        );\r\n        setImages(imagesCopy);\r\n        console.log(imagesCopy);\r\n      })\r\n      .catch((error) => console.log(error));\r\n\r\n    axios\r\n      .delete(\"/api/v1/jeepneys/delete_jeep\", {\r\n        params: {\r\n          id,\r\n        },\r\n      })\r\n      .then((res) => {\r\n        let jeepneysCopy = [...jeepneys];\r\n\r\n        jeepneysCopy = jeepneysCopy.filter((jeepney) => jeepney.id !== id);\r\n        setJeepneys(jeepneysCopy);\r\n\r\n        console.log(jeepneysCopy);\r\n        Modal.success({\r\n          content: \"Jeepney has been Removed\",\r\n        });\r\n      })\r\n      .catch((error) => console.log(error));\r\n  };\r\n\r\n  const handleCancel = () => {\r\n    setIfCanceled(true);\r\n    setIsModalVisible(false);\r\n  };\r\n  const handleClose = () => {\r\n    if (ifCanceled) {\r\n    } else {\r\n      props.afterClosing();\r\n    }\r\n  };\r\n\r\n  const handleDeleteImage = (id) => {\r\n    axios\r\n      .delete(\"/api/v1/images/delete_image\", {\r\n        params: {\r\n          id,\r\n          referenceId: 1,\r\n        },\r\n      })\r\n      .then((res) => {\r\n        let imagesCopy = [...images];\r\n        imagesCopy = imagesCopy.filter((image) => image.id !== id);\r\n        setImages(imagesCopy);\r\n        Modal.success({\r\n          content: \"Barangay image has been removed\",\r\n        });\r\n      })\r\n      .catch((error) => console.log(error));\r\n  };\r\n  return (\r\n    <div>\r\n      <Space>\r\n      <Button type=\"primary\" className=\"modal-button\" onClick={showModal}>\r\n        <span className=\"desktop-view\"><UnorderedListOutlined/> View</span>\r\n        <span className=\"mobile-view\"><UnorderedListOutlined/></span>\r\n      </Button>\r\n\r\n        {/* <Button type=\"default\" onClick={showModal}>\r\n        Assign Driver\r\n      </Button> */}\r\n      </Space>\r\n      <Modal\r\n        title=\"Jeepney Information\"\r\n        visible={isModalVisible}\r\n        confirmLoading={confirmLoading}\r\n        onOk={handleOk}\r\n        onCancel={handleCancel}\r\n        afterClose={handleClose}\r\n        footer={[\r\n          <Button\r\n            className=\"modal-button\" \r\n            loading={confirmLoading}\r\n            onClick={() => handleDelete(props.info.id)}\r\n            danger\r\n          >\r\n            Remove\r\n          </Button>,\r\n        ]}\r\n      >\r\n        <p>\r\n          <h4>Barangay Id:</h4>\r\n          {props.info.barangayId}\r\n        </p>\r\n        <p>\r\n          <h4>Plate Number:</h4>\r\n          {props.info.plateNumber}\r\n        </p>\r\n        <p>\r\n          <h4>Jeep Capacity:</h4>\r\n          {props.info.jeepCapacity}\r\n        </p>\r\n        <h4>Uploaded Images: </h4>\r\n        <Card className=\"shadow-sm\">\r\n          <Row>\r\n              {images.map((image, index) => (\r\n                <Col key={index} md={{ span: 6 }}>\r\n                  \r\n                   <br></br>\r\n                      <Image\r\n                        height={100}\r\n                        width={100}\r\n                        src={`/api/v1/images/${\r\n                          image.imagePath ? image.imagePath : \"logo.png\"\r\n                        }`}\r\n                      />\r\n                      <Row>\r\n                      <br></br>\r\n                      <Button onClick={() => handleDeleteImage(image.id)} danger>\r\n                        Delete\r\n                      </Button>\r\n                      </Row>\r\n                </Col>\r\n              ))}\r\n          </Row>\r\n        </Card>\r\n      </Modal>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default JeepneysInfoModal;\r\n","import React, { useState, useEffect } from \"react\";\r\nimport { Form, Input, Modal, Button, Upload, Select } from \"antd\";\r\nimport { UploadOutlined,PlusOutlined } from \"@ant-design/icons\";\r\nimport axios from \"axios\";\r\n\r\nfunction AddJeepneyModal(props) {\r\n  const [isModalVisible, setIsModalVisible] = useState(false);\r\n  const [confirmLoading, setConfirmLoading] = useState(false);\r\n  const [ifCanceled, setIfCanceled] = useState(false);\r\n  const [jeepneys, setJeepneys] = useState([]);\r\n  const [file, setFile] = useState({});\r\n  const [filename, setFilename] = useState(\"Choose file\");\r\n  const [uploadedImagePath, setUploadedImagePath] = useState();\r\n  const [barangays, setBarangays] = useState([]);\r\n\r\n  const showModal = () => {\r\n    setIsModalVisible(true);\r\n    console.log(props.info);\r\n  };\r\n\r\n  useEffect(() => {\r\n    axios\r\n      .get(\"/api/v1/barangays/search_all_barangays\")\r\n      .then((res) => {\r\n\r\n        let data = res.data;\r\n        setBarangays(data);\r\n      })\r\n      .catch((error) => console.log(error));\r\n  }, []);\r\n  const { Option } = Select;\r\n\r\n  const checking = (file) => {\r\n    setFilename(file);\r\n  };\r\n\r\n  const handleCancel = () => {\r\n    setIfCanceled(true);\r\n    setIsModalVisible(false);\r\n  };\r\n  const handleClose = () => {\r\n    if (ifCanceled) {\r\n    } else {\r\n      props.afterClosing();\r\n    }\r\n  };\r\n\r\n  const onFinish = (values) => {\r\n    console.log(values);\r\n    props.passedData(props.info);\r\n    setConfirmLoading(true);\r\n    setIfCanceled(false);\r\n    setTimeout(() => {\r\n      setIsModalVisible(false);\r\n      setConfirmLoading(false);\r\n    }, 2000);\r\n    // setUploadedImagePath(filename.file.response.filePath);\r\n    axios\r\n      .post(\"/api/v1/jeepneys/add_jeep\", values)\r\n      .then((res) => {\r\n        let jeepneysCopy = [...jeepneys];\r\n        jeepneysCopy = [...jeepneysCopy, res.data];\r\n        console.log(jeepneysCopy);\r\n        setJeepneys(jeepneysCopy);\r\n        // console.log(filename.file.response);\r\n        Modal.success({\r\n          content: \"Successfully Added New Jeepney\",\r\n        });\r\n\r\n        axios.post(\"/api/v1/images/save_image\", {\r\n          imageOwnerId: res.data.id,\r\n          imageReferenceId: 3,\r\n          imagePath: uploadedImagePath,\r\n        });\r\n      })\r\n      .catch((error) => console.log(error));\r\n  };\r\n\r\n  const onFinishFailed = (errorInfo) => {\r\n    Modal.error({\r\n      content: \"Failure to Add New Jeepney\",\r\n    });\r\n    setTimeout(() => {\r\n      setIsModalVisible(true);\r\n      setConfirmLoading(false);\r\n    }, 2000);\r\n    console.log(\"fail\");\r\n    console.log(\"Failed:\", errorInfo);\r\n  };\r\n\r\n  const handleChange = (value) => {\r\n    console.log(`selected ${value}`);\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <Button type=\"primary\" className=\"modal-button-add\" onClick={showModal}>\r\n        <span className=\"desktop-view\"><PlusOutlined /> Add Jeepney</span>\r\n        <span className=\"mobile-view\"><PlusOutlined /></span>\r\n      </Button>\r\n\r\n      <Modal\r\n        title=\"Add Jeepney:\"\r\n        visible={isModalVisible}\r\n        confirmLoading={confirmLoading}\r\n        onOk={onFinish}\r\n        onCancel={handleCancel}\r\n        afterClose={handleClose}\r\n        destroyOnClose={true}\r\n        footer={[\r\n          <Button key=\"back\" className=\"modal-button\"  onClick={handleCancel}>\r\n            Cancel\r\n          </Button>,\r\n          <Button\r\n            form=\"myForm\"\r\n            className=\"modal-button\" \r\n            key=\"submit\"\r\n            htmlType=\"submit\"\r\n            type=\"primary\"\r\n            loading={confirmLoading}\r\n            onClick={onFinish}\r\n          >\r\n            Add\r\n          </Button>,\r\n        ]}\r\n      >\r\n        <Form\r\n          layout=\"vertical\"\r\n          name=\"basic\"\r\n          initialValues={{ remember: true }}\r\n          onFinish={onFinish}\r\n          onFinishFailed={onFinishFailed}\r\n          id=\"myForm\"\r\n        >\r\n          <Form.Item\r\n            label=\"Barangay:\"\r\n            name=\"barangayId\"\r\n            rules={[\r\n              { required: true, message: \"Please input the Barangay's ID!\" },\r\n            ]}\r\n          >\r\n            <Select\r\n              placeholder=\"Select Barangay\"\r\n              style={{ width: '100%' }}\r\n              onChange={handleChange}\r\n            >\r\n              {barangays.map((barangay, index) => (\r\n                <Option value={barangay.id}>{barangay.barangayName}</Option>\r\n              ))}\r\n            </Select>\r\n          </Form.Item>\r\n\r\n          <Form.Item\r\n            label=\"Plate Number:\"\r\n            name=\"plateNumber\"\r\n            rules={[\r\n              { required: true, message: \"Please input the Plate Number!\" },\r\n            ]}\r\n          >\r\n            <Input />\r\n          </Form.Item>\r\n\r\n          <Form.Item\r\n            label=\"Jeep Capacity:\"\r\n            name=\"jeepCapacity\"\r\n            rules={[\r\n              { required: true, message: \"Please input the Jeep Capacity!\" },\r\n            ]}\r\n          >\r\n            <Input />\r\n          </Form.Item>\r\n          <Upload\r\n            action=\"/api/v1/images/add_image\"\r\n            listType=\"picture\"\r\n            maxCount={1}\r\n            file={file}\r\n            onChange={checking}\r\n          >\r\n            <Button icon={<UploadOutlined />}>Upload Image (Max: 1)</Button>\r\n          </Upload>\r\n        </Form>\r\n      </Modal>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default AddJeepneyModal;\r\n","import React, { useState, useEffect } from \"react\";\r\nimport { Modal, Button, Form, Input, Select } from \"antd\";\r\nimport axios from \"axios\";\r\nimport { EditOutlined  } from \"@ant-design/icons\";\r\n\r\nfunction EditJeepneyModal(props) {\r\n  const [isModalVisible, setIsModalVisible] = useState(false);\r\n  const [form] = Form.useForm();\r\n  const [confirmLoading, setConfirmLoading] = useState(false);\r\n  const [ifCanceled, setIfCanceled] = useState(false);\r\n  const [ifChanged, setIfChanged] = useState();\r\n  const [barangays, setBarangays] = useState([]);\r\n\r\n  useEffect(() => {\r\n    axios\r\n      .get(\"/api/v1/barangays/search_all_barangays\")\r\n      .then((res) => {\r\n\r\n        let data = res.data;\r\n        setBarangays(data);\r\n      })\r\n      .catch((error) => console.log(error));\r\n  }, []);\r\n  const { Option } = Select;\r\n\r\n  const handleChange = (value) => {\r\n    console.log(`selected ${value}`);\r\n  };\r\n\r\n\r\n  const showModal = () => {\r\n    form.setFieldsValue({\r\n      id: props.info.id,\r\n      barangayId: props.info.barangayId,\r\n      plateNumber: props.info.plateNumber,\r\n      jeepCapacity: props.info.jeepCapacity,\r\n    });\r\n    setIsModalVisible(true);\r\n    setIfChanged(false);\r\n  };\r\n\r\n  const handleOk = () => {\r\n    setIsModalVisible(false);\r\n  };\r\n\r\n  const handleCancel = () => {\r\n    setIfCanceled(true);\r\n    setIsModalVisible(false);\r\n  };\r\n  const handleClose = () => {\r\n    if (ifCanceled) {\r\n    } else {\r\n      props.afterClosing();\r\n    }\r\n  };\r\n\r\n  const onFinish = (values) => {\r\n    //console.log(ifChanged);\r\n    setConfirmLoading(true);\r\n    setIfCanceled(false);\r\n    props.passedData(props.info);\r\n     axios\r\n      .post(\"/api/v1/jeepneys/update_jeepney\", {\r\n        id: props.info.id,\r\n        barangayId: values.barangayId,\r\n        plateNumber: values.plateNumber,\r\n        jeepCapacity: values.jeepCapacity,\r\n      })\r\n      .then((res) => {\r\n        setTimeout(() => {\r\n          setIsModalVisible(false);\r\n          setConfirmLoading(false);\r\n          \r\n        }, 2000);\r\n        {\r\n          ifChanged\r\n            ? Modal.success({\r\n                content: \"Successfully Updated Jeepney\",\r\n              })\r\n            : Modal.success({\r\n                content: \"Jeepney Info is up to date\",\r\n              });\r\n        }\r\n      })\r\n      .catch((error) => console.log(error));\r\n\r\n    //console.log(ifChanged);\r\n  };\r\n\r\n  const onFinishFailed = (errorInfo) => {\r\n    Modal.error({\r\n      content: \"Failure to Update Jeepney Info\",\r\n    });\r\n    setTimeout(() => {\r\n      setIsModalVisible(true);\r\n      setConfirmLoading(false);\r\n    }, 2000);\r\n    // console.log(\"Failed:\", errorInfo);\r\n  };\r\n  const onValuesChange = (changedValues, allValues) => {\r\n  console.log(\"Changed\", allValues, changedValues);\r\n    setIfChanged(true);\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <Button type=\"primary\" className=\"modal-button\" onClick={showModal}>\r\n        <span className=\"desktop-view\"><EditOutlined /> Edit</span>\r\n        <span className=\"mobile-view\"><EditOutlined /></span>\r\n      </Button>\r\n      <Modal\r\n        title=\"Update Jeepney Info\"\r\n        confirmLoading={confirmLoading}\r\n        visible={isModalVisible}\r\n        onOk={onFinish}\r\n        onCancel={handleCancel}\r\n        afterClose={handleClose}\r\n        destroyOnClose={true}\r\n        footer={[\r\n          <Button key=\"back\" className=\"modal-button\" onClick={handleCancel}>\r\n            Cancel\r\n          </Button>,\r\n          <Button form=\"myForm\" className=\"modal-button\" htmlType=\"submit\" type=\"primary\">\r\n            Update\r\n          </Button>,\r\n        ]}\r\n      >\r\n        <Form\r\n          layout=\"vertical\"\r\n          name=\"basic\"\r\n          form={form}\r\n          initialValues={{ remember: true }}\r\n          onFinish={onFinish}\r\n          onFinishFailed={onFinishFailed}\r\n          onValuesChange={onValuesChange}\r\n          id=\"myForm\"\r\n        >\r\n          {/* <Form.Item label=\"Barangay ID:\" name=\"barangayId\">\r\n            <Input disabled={true} bordered={false} />\r\n          </Form.Item> */}\r\n          <Form.Item\r\n            label=\"Barangay:\"\r\n            name=\"barangayId\"\r\n            rules={[\r\n              { required: true, message: \"Please input the Barangay's ID!\" },\r\n            ]}\r\n          >\r\n            <Select\r\n              placeholder=\"Select Barangay\"\r\n              style={{ width: '100%' }}\r\n              onChange={handleChange}\r\n            >\r\n              {barangays.map((barangay, index) => (\r\n                <Option value={barangay.id}>{barangay.barangayName}</Option>\r\n              ))}\r\n            </Select>\r\n          </Form.Item>\r\n          <Form.Item\r\n            label=\"Plate Number:\"\r\n            name=\"plateNumber\"\r\n            rules={[\r\n              { required: true, message: \"Please input the Plate Number!\" },\r\n            ]}\r\n          >\r\n            <Input />\r\n          </Form.Item>\r\n\r\n          <Form.Item\r\n            label=\"Jeep Capacity:\"\r\n            name=\"jeepCapacity\"\r\n            rules={[\r\n              { required: true, message: \"Please input Jeep Capacity!\" },\r\n            ]}\r\n          >\r\n            <Input />\r\n          </Form.Item>\r\n        </Form>\r\n      </Modal>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default EditJeepneyModal;\r\n","import React, { useState } from \"react\";\r\nimport {\r\n  Modal,\r\n  Upload,\r\n  Button,\r\n  Space,\r\n  Row,\r\n  Col,\r\n  List,\r\n  Form,\r\n  Radio,\r\n  Input,\r\n  message,\r\n} from \"antd\";\r\nimport { UploadOutlined } from \"@ant-design/icons\";\r\nimport axios from \"axios\";\r\nimport { Content } from \"antd/lib/layout/layout\";\r\n\r\nfunction AddJeepneyImageModal(props) {\r\n  const [file, setFile] = useState({});\r\n  const [imageStatus, setImageStatus] = useState(false);\r\n  const [filename, setFilename] = useState(\"Choose file\");\r\n  const [uploadedImagePath, setUploadedImagePath] = useState(\"\");\r\n  const [uploadImageStatus, setUploadImageStatus] = useState(\"none\");\r\n  const [fetchImage, setFetchImage] = useState(\"\");\r\n  const [images, setImages] = useState([]);\r\n  const [info, setInfo] = useState([]);\r\n  const [ifCanceled, setIfCanceled] = useState(false);\r\n  const [isModalVisible, setIsModalVisible] = useState(false);\r\n  const [form] = Form.useForm();\r\n  const [confirmLoading, setConfirmLoading] = useState(false);\r\n\r\n  const showModal = () => {\r\n    form.setFieldsValue({\r\n      imageOwnerId: props.info.id,\r\n      imageReferenceId: 3,\r\n    });\r\n    setUploadedImagePath();\r\n    setUploadImageStatus(\"removed\");\r\n    setFilename(\"Choose file\");\r\n    setIsModalVisible(true);\r\n    console.log(props.info);\r\n  };\r\n\r\n  const checking = (file) => {\r\n    setFilename(file);\r\n  };\r\n  const viewFile = () => {\r\n    {\r\n      (() => {\r\n        switch (uploadImageStatus) {\r\n          case \"done\":\r\n            return (\r\n              setUploadedImagePath(filename.file.response.filePath),\r\n              console.log(\"done\")\r\n            );\r\n\r\n          case \"removed\":\r\n            return console.log(\"removed\");\r\n\r\n          case \"\":\r\n            return console.log(\"none\");\r\n        }\r\n      })();\r\n    }\r\n  };\r\n\r\n  const handleOk = () => {\r\n    setIsModalVisible(false);\r\n  };\r\n\r\n  const handleCancel = () => {\r\n    setIfCanceled(true);\r\n\r\n    setTimeout(() => {\r\n      setIsModalVisible(false);\r\n      setConfirmLoading(false);\r\n    }, 500);\r\n  };\r\n\r\n  const handleClose = () => {\r\n    setConfirmLoading(true);\r\n    setIfCanceled(false);\r\n  };\r\n\r\n  const onFinish = (values) => {\r\n    if (uploadImageStatus == \"done\") {\r\n      axios\r\n        .post(\"/api/v1/images/save_image\", {\r\n          imageOwnerId: props.info.id,\r\n          imageReferenceId: 3,\r\n          imagePath: uploadedImagePath,\r\n        })\r\n        .then((res) => {\r\n          message.success(\"Successfully Saved\");\r\n          setTimeout(() => {\r\n            setIsModalVisible(false);\r\n            setConfirmLoading(false);\r\n          }, 500);\r\n          setUploadedImagePath(\"\");\r\n        })\r\n        .catch((error) => console.log(error));\r\n    } else {\r\n      message.error(\"Image Saving Error\");\r\n      // console.log(\"Uploaded image is removed\");\r\n    }\r\n  };\r\n\r\n  const onFinishFailed = (errorInfo) => {\r\n    console.log(\"fail\");\r\n    console.log(\"Failed:\", errorInfo);\r\n  };\r\n\r\n  const removeImage = (val) => {\r\n    //console.log(\"Removed image\", val.response.filePath);\r\n    axios\r\n      .delete(\"/api/v1/images/delete_folder_image\", {\r\n        params: {\r\n          fileName: val.response.imagePath,\r\n          fileId: val.response.id,\r\n        },\r\n      })\r\n      .then((res) => {\r\n        setUploadImageStatus(\"removed\");\r\n        // console.log(res.data);\r\n      })\r\n      .catch((error) => console.log(error));\r\n    setUploadedImagePath();\r\n    message.error(`File removed Successfully.`);\r\n  };\r\n\r\n  const uploadFile = {\r\n    name: \"file\",\r\n    action: \"/api/v1/images/add_image\",\r\n    headers: {\r\n      authorization: \"authorization-text\",\r\n    },\r\n    data: { imageOwnerId: props.info.id, imageReferenceId: 3 },\r\n    onChange(info) {\r\n      if (info.file.status !== \"uploading\") {\r\n        console.log(\"uploading\", info.file, info.fileList);\r\n      }\r\n      if (info.file.status === \"done\") {\r\n        message.success(`${info.file.name} file uploaded Successfully.`);\r\n      } else if (info.file.status === \"error\") {\r\n        message.error(`${info.file.name} file upload Failed.`);\r\n      }\r\n      setUploadImageStatus(info.file.status);\r\n      setFilename(info);\r\n    },\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <Button type=\"primary\" className=\"modal-button\" onClick={showModal}>\r\n        <span className=\"desktop-view\"><UploadOutlined /> Upload</span>\r\n        <span className=\"mobile-view\"><UploadOutlined /></span>\r\n      </Button>\r\n      <Modal\r\n        title=\"Jeepney Image Upload\"\r\n        confirmLoading={confirmLoading}\r\n        visible={isModalVisible}\r\n        onOk={onFinish}\r\n        onCancel={handleCancel}\r\n        afterClose={handleClose}\r\n        destroyOnClose={true}\r\n        footer={[\r\n          <Button key=\"back\" className=\"modal-button\"  type=\"danger\" onClick={handleCancel}>\r\n            Close\r\n          </Button>,\r\n        ]}\r\n      >\r\n        <List itemLayout=\"vertical\">\r\n          <List.Item>\r\n          <h4>Plate Number: </h4>\r\n          {props.info.plateNumber}\r\n          </List.Item>\r\n          <List.Item>\r\n          <h4>Image Reference Name: </h4>\r\n          Jeepney\r\n          </List.Item>\r\n        </List>\r\n        <Row>\r\n          <Space style={{ width: \"100%\" }} size=\"large\">\r\n            <Upload\r\n              {...uploadFile}\r\n              onRemove={removeImage}\r\n              listType=\"picture-card\"\r\n              showUploadList={{showPreviewIcon:false}}\r\n              maxCount={5}\r\n            >\r\n                <Space>\r\n                  <UploadOutlined/>\r\n               Upload\r\n               </Space>\r\n            </Upload>\r\n          </Space>\r\n        </Row>\r\n        {/* <Row>\r\n          <Form\r\n            name=\"basic\"\r\n            form={form}\r\n            layout={\"horizontal\"}\r\n            initialValues={{ remember: true }}\r\n            onFinish={onFinish}\r\n            onFinishFailed={onFinishFailed}\r\n          >\r\n            <Form.Item label=\"Image Owner ID: \" name=\"imageOwnerId\">\r\n               {props.info.id}\r\n            </Form.Item>\r\n            <Form.Item label=\"Image Reference: \" name=\"imageReferenceId\">\r\n               Barangay\r\n            </Form.Item>\r\n          </Form>\r\n        </Row> */}\r\n      </Modal>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default AddJeepneyImageModal;\r\n","import React, { useEffect, useState } from \"react\";\r\nimport { Table, Space, Input, Row, Col, Divider } from \"antd\";\r\nimport axios from \"axios\";\r\nimport Column from \"antd/lib/table/Column\";\r\nimport ColumnGroup from \"antd/lib/table/ColumnGroup\";\r\nimport JeepneysInfoModal from \"./JeepneysInfoModal\";\r\nimport AddJeepneyModal from \"./AddJeepneyModal\";\r\nimport EditJeepneyModal from \"./EditJeepneyModal\";\r\nimport AddJeepneyImageModal from \"./AddJeepneyImageModal\";\r\n\r\nfunction JeepneysTableList() {\r\n  const [jeepneys, setJeepneys] = useState([]);\r\n  const { Search } = Input;\r\n  const [dataFromModal, setDataFromModal] = useState(\"\");\r\n\r\n  useEffect(() => {\r\n    axios\r\n      .get(\"/api/v1/jeepneys/\")\r\n      .then((res) => {\r\n\r\n        let data = res.data;\r\n        data = data.map((d) => {\r\n          return { ...d, barangayName: d.barangay.barangayName };\r\n        });\r\n\r\n        setJeepneys(data);\r\n      })\r\n      .catch((error) => console.log(error));\r\n  }, []);\r\n\r\n  const onSearch = (value) => {\r\n    axios\r\n      .post(\"/api/v1/jeepneys/search_jeepneys\", { value: value })\r\n      .then((_res) => {\r\n        console.log(_res);\r\n        let data = _res.data;\r\n        data = data.map((d) => {\r\n          return { ...d, barangayName: d.barangay.barangayName };\r\n        });\r\n\r\n        setJeepneys(data);\r\n        console.log(\"success\");\r\n      });\r\n\r\n    console.log(value);\r\n  };\r\n\r\n  const modalClosed = () => {\r\n    console.log(\"Passed data from modal\", dataFromModal);\r\n    axios\r\n      .get(\"/api/v1/jeepneys/\")\r\n      .then((res) => {\r\n\r\n        let data = res.data;\r\n        data = data.map((d) => {\r\n          return { ...d, barangayName: d.barangay.barangayName };\r\n        });\r\n\r\n        setJeepneys(data);\r\n      })\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <Row justify=\"space-between\">\r\n        <Col span={4}>\r\n          <Space direction=\"vertical\">\r\n            <Search\r\n              placeholder=\"Search Jeepney\"\r\n              onSearch={onSearch}\r\n              allowClear={true}\r\n              enterButton\r\n            />\r\n          </Space>\r\n        </Col>\r\n        <Col span={4}>\r\n          <AddJeepneyModal\r\n            info={\"\"}\r\n            passedData={setDataFromModal}\r\n            afterClosing={modalClosed}\r\n          />\r\n        </Col>\r\n      </Row>\r\n      <Divider orientation=\"center\">List of Jeepneys</Divider>\r\n      <Row>\r\n        <Table dataSource={jeepneys} scroll={{ x: 1000, y: 500 }} sticky>\r\n          <Column\r\n            title=\"Barangay\"\r\n            dataIndex=\"barangayName\"\r\n            key=\"barangayId\"\r\n          ></Column>\r\n          <ColumnGroup\r\n            title=\"Plate Number\"\r\n            dataIndex=\"plateNumber\"\r\n            key=\"plateNumber\"\r\n          ></ColumnGroup>\r\n          <ColumnGroup\r\n            title=\"Jeep Capacity\"\r\n            dataIndex=\"jeepCapacity\"\r\n            key=\"jeepCapacity\"\r\n          ></ColumnGroup>\r\n          {/* <ColumnGroup\r\n            title=\"Current Driver\"\r\n            dataIndex=\"currentDriver\"\r\n            key=\"currentDriver\"\r\n          ></ColumnGroup> */}\r\n          <ColumnGroup\r\n            title=\"Actions\"\r\n            key=\"actions\"\r\n            fixed=\"right\"\r\n            width=\"35vh\"\r\n            render={(value) => (\r\n              <Space>\r\n                <JeepneysInfoModal\r\n                  info={value}\r\n                  passedData={setDataFromModal}\r\n                  afterClosing={modalClosed}\r\n                />\r\n                 <EditJeepneyModal\r\n                  info={value}\r\n                  passedData={setDataFromModal}\r\n                  afterClosing={modalClosed}\r\n                />\r\n                <AddJeepneyImageModal info={value} />\r\n              </Space>\r\n            )}\r\n          ></ColumnGroup>\r\n        </Table>\r\n      </Row>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default JeepneysTableList;\r\n"],"sourceRoot":""}