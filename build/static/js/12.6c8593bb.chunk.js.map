{"version":3,"sources":["components/FunFactsTableList/AddFunfactsModal.js","components/FunFactsTableList/FunFactsTableList.js"],"names":["AddFunfactsModal","props","useState","setFilename","uploadedImagePath","setUploadedImagePath","uploadImageStatus","setUploadImageStatus","setIfCanceled","isModalVisible","setIsModalVisible","useForm","confirmLoading","setConfirmLoading","handleCancel","afterClosing","setTimeout","uploadFile","name","action","headers","authorization","onChange","info","file","status","console","log","fileList","message","success","error","type","className","onClick","UploadOutlined","title","visible","onOk","values","axios","post","imageOwnerId","id","imageReferenceId","imagePath","then","res","catch","onCancel","afterClose","destroyOnClose","footer","style","width","size","onRemove","val","delete","params","fileName","response","lgImagePath","fileId","listType","showUploadList","showPreviewIcon","maxCount","FunFactsTableList","Title","images","setImages","sliderRef","useRef","handlePrev","current","prev","handleNext","next","useEffect","get","data","span","level","align","ref","maxWidth","swipeToSlide","dots","draggable","map","image","index","cover","src","actions","LeftOutlined","DeleteOutlined","imagesCopy","filter","content","okButtonProps","borderRadius","danger","RightOutlined"],"mappings":"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","file":"static/js/12.6c8593bb.chunk.js","sourcesContent":["import React, { useState } from \"react\";\r\nimport { Modal, Upload, Button, Space, Row, List, Form, message } from \"antd\";\r\nimport { UploadOutlined } from \"@ant-design/icons\";\r\nimport axios from \"axios\";\r\n\r\nfunction AddFunfactsModal(props) {\r\n  const [file, setFile] = useState({});\r\n  const [imageStatus, setImageStatus] = useState(false);\r\n  const [filename, setFilename] = useState(\"Choose file\");\r\n  const [uploadedImagePath, setUploadedImagePath] = useState(\"\");\r\n  const [uploadImageStatus, setUploadImageStatus] = useState(\"none\");\r\n  const [fetchImage, setFetchImage] = useState(\"\");\r\n  const [images, setImages] = useState([]);\r\n  const [info, setInfo] = useState([]);\r\n  const [ifCanceled, setIfCanceled] = useState(false);\r\n  const [isModalVisible, setIsModalVisible] = useState(false);\r\n  const [form] = Form.useForm();\r\n  const [confirmLoading, setConfirmLoading] = useState(false);\r\n\r\n  const showModal = () => {\r\n    setUploadedImagePath();\r\n    setUploadImageStatus(\"removed\");\r\n    setFilename(\"Choose file\");\r\n    setIsModalVisible(true);\r\n    console.log(props.info);\r\n  };\r\n\r\n  const checking = (file) => {\r\n    setFilename(file);\r\n  };\r\n  const viewFile = () => {\r\n    {\r\n      (() => {\r\n        switch (uploadImageStatus) {\r\n          case \"done\":\r\n            return (\r\n              setUploadedImagePath(filename.file.response.filePath),\r\n              console.log(\"done\")\r\n            );\r\n\r\n          case \"removed\":\r\n            return console.log(\"removed\");\r\n\r\n          case \"\":\r\n            return console.log(\"none\");\r\n        }\r\n      })();\r\n    }\r\n  };\r\n\r\n  const handleOk = () => {\r\n    setIsModalVisible(false);\r\n  };\r\n\r\n  const handleCancel = () => {\r\n    setIfCanceled(true);\r\n    props.afterClosing();\r\n\r\n    setTimeout(() => {\r\n      setIsModalVisible(false);\r\n      setConfirmLoading(false);\r\n    }, 500);\r\n  };\r\n\r\n  const handleClose = () => {\r\n    setConfirmLoading(true);\r\n    setIfCanceled(false);\r\n    props.afterClosing();\r\n  };\r\n\r\n  const onFinish = (values) => {\r\n    if (uploadImageStatus == \"done\") {\r\n      axios\r\n        .post(\"/api/v1/images/save_image\", {\r\n          imageOwnerId: props.info.id,\r\n          imageReferenceId: 1,\r\n          imagePath: uploadedImagePath,\r\n        })\r\n        .then((res) => {\r\n          message.success(\"Successfully Saved\");\r\n          setTimeout(() => {\r\n            setIsModalVisible(false);\r\n            setConfirmLoading(false);\r\n          }, 500);\r\n          setUploadedImagePath(\"\");\r\n        })\r\n        .catch((error) => console.log(error));\r\n    } else {\r\n      message.error(\"Image Saving Error\");\r\n      // console.log(\"Uploaded image is removed\");\r\n    }\r\n  };\r\n\r\n  const onFinishFailed = (errorInfo) => {\r\n    console.log(\"fail\");\r\n    console.log(\"Failed:\", errorInfo);\r\n  };\r\n\r\n  const removeImage = (val) => {\r\n    //console.log(\"Removed image\", val.response.filePath);\r\n    axios\r\n      .delete(\"/api/v1/funfacts/delete_funfacts\", {\r\n        params: {\r\n          fileName: val.response.lgImagePath,\r\n          fileId: val.response.id,\r\n        },\r\n      })\r\n      .then((res) => {\r\n        setUploadImageStatus(\"removed\");\r\n        // console.log(res.data);\r\n      })\r\n      .catch((error) => console.log(error));\r\n    setUploadedImagePath();\r\n    message.error(`File removed Successfully.`);\r\n  };\r\n\r\n  const uploadFile = {\r\n    name: \"file\",\r\n    action: \"/api/v1/funfacts/add_funfacts\",\r\n    headers: {\r\n      authorization: \"authorization-text\",\r\n    },\r\n    //data: { imageOwnerId: props.info.id, imageReferenceId: 1 },\r\n    onChange(info) {\r\n      if (info.file.status !== \"uploading\") {\r\n        console.log(\"uploading\", info.file, info.fileList);\r\n      }\r\n      if (info.file.status === \"done\") {\r\n        message.success(`${info.file.name} file uploaded Successfully.`);\r\n      } else if (info.file.status === \"error\") {\r\n        message.error(`${info.file.name} file upload Failed.`);\r\n      }\r\n      setUploadImageStatus(info.file.status);\r\n      setFilename(info);\r\n    },\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <Button\r\n        type=\"primary\"\r\n        className=\"modal-button-upload\"\r\n        onClick={showModal}\r\n      >\r\n        <span className=\"desktop-view\">\r\n          <UploadOutlined /> Add Funfacts\r\n        </span>\r\n        <span className=\"mobile-view\">\r\n          <UploadOutlined />\r\n        </span>\r\n      </Button>\r\n      <Modal\r\n        title=\"Fun Facts Upload\"\r\n        confirmLoading={confirmLoading}\r\n        visible={isModalVisible}\r\n        onOk={onFinish}\r\n        onCancel={handleCancel}\r\n        afterClose={handleClose}\r\n        destroyOnClose={true}\r\n        footer={[\r\n          <Button\r\n            key=\"back\"\r\n            className=\"modal-button\"\r\n            type=\"danger\"\r\n            onClick={handleCancel}\r\n          >\r\n            Close\r\n          </Button>,\r\n        ]}\r\n      >\r\n        {/* <List itemLayout=\"vertical\">\r\n          <List.Item>\r\n            <h4>Image Barangay ID: </h4>\r\n            {props.info.id}\r\n          </List.Item>\r\n          <List.Item>\r\n            <h4>Image Barangay Name: </h4>\r\n            {props.info.barangayName}\r\n          </List.Item>\r\n          <List.Item>\r\n            <h4>Image Reference Name: </h4>\r\n            Barangay\r\n          </List.Item>\r\n        </List> */}\r\n        <Row>\r\n          <Space style={{ width: \"100%\" }} size=\"large\">\r\n            <Upload\r\n              {...uploadFile}\r\n              onRemove={removeImage}\r\n              listType=\"picture-card\"\r\n              showUploadList={{ showPreviewIcon: false }}\r\n              maxCount={5}\r\n            >\r\n              <Space>\r\n                <UploadOutlined />\r\n                Upload\r\n              </Space>\r\n            </Upload>\r\n          </Space>\r\n        </Row>\r\n        {/* <Row>\r\n          <Form\r\n            name=\"basic\"\r\n            form={form}\r\n            layout={\"horizontal\"}\r\n            initialValues={{ remember: true }}\r\n            onFinish={onFinish}\r\n            onFinishFailed={onFinishFailed}\r\n          >\r\n            <Form.Item label=\"Image Owner ID: \" name=\"imageOwnerId\">\r\n               {props.info.id}\r\n            </Form.Item>\r\n            <Form.Item label=\"Image Reference: \" name=\"imageReferenceId\">\r\n               Barangay\r\n            </Form.Item>\r\n          </Form>\r\n        </Row> */}\r\n      </Modal>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default AddFunfactsModal;\r\n","import React, { useState, useEffect, useRef } from \"react\";\r\nimport {\r\n  Carousel,\r\n  Divider,\r\n  Row,\r\n  Col,\r\n  Typography,\r\n  Image,\r\n  Card,\r\n  Modal,\r\n  Space,\r\n} from \"antd\";\r\nimport axios from \"axios\";\r\nimport AddFunfactsModal from \"./AddFunfactsModal\";\r\nimport { RightOutlined, LeftOutlined, DeleteOutlined } from \"@ant-design/icons\";\r\n\r\nfunction FunFactsTableList() {\r\n  const { Title } = Typography;\r\n\r\n  const [images, setImages] = useState([]);\r\n  const sliderRef = useRef();\r\n\r\n  const handlePrev = () => sliderRef.current.prev();\r\n  const handleNext = () => sliderRef.current.next();\r\n\r\n  const contentStyle = {\r\n    maxWidth: \"350px\",\r\n  };\r\n\r\n  const imageStyle = {\r\n    height: \"400px\",\r\n    lineHeight: \"160px\",\r\n    width: \"500px\",\r\n  };\r\n\r\n  useEffect(() => {\r\n    axios\r\n      .get(\"/api/v1/funfacts/\")\r\n      .then((res) => {\r\n        let data = res.data;\r\n        setImages(data);\r\n        console.log(data);\r\n      })\r\n      .catch((error) => console.log(error));\r\n  }, []);\r\n\r\n  const handleDeleteImage = (id, imagePath) => {\r\n    axios\r\n      .delete(\"/api/v1/funfacts/delete_funfacts\", {\r\n        params: {\r\n          fileName: imagePath,\r\n          fileId: id,\r\n        },\r\n      })\r\n      .then((res) => {\r\n        let imagesCopy = [...images];\r\n        imagesCopy = imagesCopy.filter((image) => image.id !== id);\r\n        setImages(imagesCopy);\r\n        Modal.success({\r\n          content: \"Fun fact image has been removed\",\r\n          okButtonProps: {\r\n            style: {borderRadius: '50px'}\r\n          },\r\n        });\r\n      })\r\n      .catch((error) => console.log(error));\r\n  };\r\n\r\n  const modalClosed = () => {\r\n    axios.get(\"/api/v1/funfacts/\").then((res) => {\r\n      //console.log(res);\r\n      let data = res.data;\r\n      setImages(data);\r\n    });\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <Row>\r\n        <Col span={20}>\r\n        </Col>\r\n        <Col span={4}>\r\n        <AddFunfactsModal afterClosing={modalClosed} />\r\n        </Col>\r\n      </Row>\r\n      <Divider>\r\n        <Title level={4}>Fun Facts</Title>\r\n      </Divider>\r\n      <Row>\r\n    \r\n        <Col span={24} align=\"center\">\r\n          <Carousel\r\n            ref={sliderRef}\r\n            style={contentStyle}\r\n            swipeToSlide={true}\r\n            dots={false}\r\n            draggable\r\n          >\r\n            {images.map((image, index) => (\r\n              <Row>\r\n                <Col key={index} span={24}>\r\n                    <Card\r\n                        style={{ width: 350 }}\r\n                        cover={\r\n                          <Image\r\n                            src={`/api/v1/funfacts/${\r\n                              image.lgImagePath ? image.lgImagePath : \"logo.png\"\r\n                            }`}\r\n                          />\r\n                        }\r\n                        actions={[\r\n                          <LeftOutlined onClick={handlePrev} />,\r\n                          <DeleteOutlined\r\n                          onClick={() => handleDeleteImage(image.id, image.lgImagePath)}\r\n                          danger\r\n                        />,\r\n                        <RightOutlined onClick={handleNext} />\r\n                        ]}\r\n                      >\r\n                    </Card>\r\n                  </Col>\r\n              </Row>\r\n            ))}\r\n          </Carousel>\r\n        </Col>\r\n      </Row>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default FunFactsTableList;\r\n"],"sourceRoot":""}