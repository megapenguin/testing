{"version":3,"sources":["components/dashboard5/logo.png","components/dashboard4/index.js","components/dashboard5/ImageUploadDashboard.js","components/dashboard5/ImageUpload.js"],"names":["ImageUploadChartShit","React","lazy","ImageUploadDashboard","fallback","ImageUpload","props","useState","file","filename","setFilename","uploadedImagePath","setUploadedImagePath","useEffect","axios","get","then","res","console","log","data","setImages","catch","error","onFinish","values","post","imageOwnerId","imageReferenceId","imagePath","gutter","style","width","size","action","listType","maxCount","onChange","icon","UploadOutlined","onClick","response","filePath","height","src","borderColor","border","name","initialValues","remember","onFinishFailed","errorInfo","Item","label","rules","required","message","Group","Button","value","disabled","length","type","htmlType"],"mappings":"6VAAe,I,QCETA,EAAuBC,IAAMC,MAAK,kBAAM,wDCY/BC,MAVf,WACE,OACE,8BACE,cAAC,WAAD,CAAUC,SAAU,yCAApB,SACE,cAACJ,EAAD,S,iBCgJOK,UArIf,SAAqBC,GAAQ,IAAD,EACFC,mBAAS,IADP,mBACnBC,EADmB,aAEMD,mBAAS,gBAFf,mBAEnBE,EAFmB,KAETC,EAFS,OAGwBH,mBAAS,IAHjC,mBAGnBI,EAHmB,KAGAC,EAHA,OAIUL,mBAAS,IAJnB,6BAM1BM,qBAAU,WACRC,IACGC,IAAI,mBACJC,MAAK,SAACC,GACLC,QAAQC,IAAIF,GAEZ,IAAIG,EAAOH,EAAIG,KACfC,EAAUD,MAEXE,OAAM,SAACC,GAAD,OAAWL,QAAQC,IAAII,QAC/B,IAEH,IAlB0B,EA8BEhB,mBAAS,IA9BX,mBA8BXc,GA9BW,WAgCpBG,EAAW,SAACC,GAChBP,QAAQC,IAAIM,GACZX,IACGY,KAAK,4BAA6B,CACjCC,aAAcF,EAAOE,aACrBC,iBAAkBH,EAAOG,iBACzBC,UAAWlB,IAEZK,MAAK,SAACC,OACNK,OAAM,SAACC,GAAD,OAAWL,QAAQC,IAAII,OAalC,OACE,gCACE,mBAAKO,OAAQ,CAAC,GAAI,IAAlB,SACE,4BACE,mBAAOC,MAAO,CAAEC,MAAO,QAAUC,KAAK,QAAtC,SACE,mBACEC,OAAO,2BACPC,SAAS,UACTC,SAAU,EACV5B,KAAMA,EACN6B,SA9CK,SAAC7B,GAChBE,EAAYF,IAwCJ,SAOE,mBAAQ8B,KAAM,cAACC,EAAA,EAAD,IAAd,2CAKR,mBAAKT,OAAQ,CAAC,GAAI,IAAlB,SACE,mBAAQU,QAnDG,WACC,eAAZ/B,EACFS,QAAQC,IAAI,sBAEZP,EAAqBH,EAASD,KAAKiC,SAASC,UAC5CxB,QAAQC,IAAIV,EAASD,KAAKiC,YA8CxB,oCAEF,mBAAKX,OAAQ,CAAC,GAAI,IAAlB,SACE,mBACEE,MAAO,IACPW,OAAQ,IACRC,IAAG,yBACDjC,GAAwC,YAE1CoB,MAAO,CAAEc,YAAa,QAASC,OAAQ,YAG3C,mBAAKhB,OAAQ,CAAC,GAAI,IAAlB,SACE,oBACEiB,KAAK,QACLC,cAAe,CAAEC,UAAU,GAC3BzB,SAAUA,EACV0B,eA7Ce,SAACC,GACtBjC,QAAQC,IAAI,QACZD,QAAQC,IAAI,UAAWgC,IAuCnB,UAME,kBAAMC,KAAN,CACEC,MAAM,iBACNN,KAAK,eACLO,MAAO,CACL,CAAEC,UAAU,EAAMC,QAAS,qCAJ/B,SAOE,wBAEF,kBAAMJ,KAAN,CACEC,MAAM,qBACNN,KAAK,mBACLO,MAAO,CAAC,CAAEC,UAAU,EAAMC,QAAS,+BAHrC,SAKE,mBAAOC,MAAP,WACE,kBAAOC,OAAP,CAAcC,MAAM,IAApB,oBACA,kBAAOD,OAAP,CAAcC,MAAM,IAApB,qBACA,kBAAOD,OAAP,CAAcC,MAAM,IAApB,2BAIJ,kBAAMP,KAAN,UACE,mBACEQ,SAAuC,IAA7BjD,EAAkBkD,OAC5BrB,QAAShB,EACTsC,KAAK,UACLC,SAAS,SAJX,SAMGpD,EAAoB,aAAe,2BAK5C,4BACE,4BACE,cAAC,EAAD","file":"static/js/7.64879bfe.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/logo.aaf24101.png\";","import React from \"react\";\r\n\r\nconst ImageUploadChartShit = React.lazy(() => import(\"./ImageUploadChartShit\"));\r\n\r\n\r\n//import ImageUploadChartShit from \"./ImageUploadChartShit\";\r\n\r\nexport { ImageUploadChartShit };\r\n","import React, { Suspense } from \"react\";\r\n\r\nimport { ImageUploadChartShit } from \"../../components/dashboard4\";\r\n\r\nfunction ImageUploadDashboard() {\r\n  return (\r\n    <div>\r\n      <Suspense fallback={<h1>LOADING</h1>}>\r\n        <ImageUploadChartShit />\r\n      </Suspense>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default ImageUploadDashboard;\r\n","import React, { useState, useContext, useEffect } from \"react\";\r\nimport \"./ImageUpload.css\";\r\nimport logo from \"././logo.png\";\r\nimport {\r\n  Upload,\r\n  Button,\r\n  Space,\r\n  Row,\r\n  Col,\r\n  Image,\r\n  Form,\r\n  Radio,\r\n  Input,\r\n} from \"antd\";\r\nimport { UploadOutlined } from \"@ant-design/icons\";\r\nimport ImageUploadDashboard from \"./ImageUploadDashboard\";\r\n\r\nimport axios from \"axios\";\r\n\r\nfunction ImageUpload(props) {\r\n  const [file, setFile] = useState({});\r\n  const [filename, setFilename] = useState(\"Choose file\");\r\n  const [uploadedImagePath, setUploadedImagePath] = useState(\"\");\r\n  const [fetchImage, setFetchImage] = useState(\"\");\r\n\r\n  useEffect(() => {\r\n    axios\r\n      .get(\"/api/v1/images/\")\r\n      .then((res) => {\r\n        console.log(res);\r\n\r\n        let data = res.data;\r\n        setImages(data);\r\n      })\r\n      .catch((error) => console.log(error));\r\n  }, []);\r\n\r\n  const checking = (file) => {\r\n    setFilename(file);\r\n  };\r\n  const viewFile = () => {\r\n    if (filename == \"Choose file\") {\r\n      console.log(\"No image selected\");\r\n    } else {\r\n      setUploadedImagePath(filename.file.response.filePath);\r\n      console.log(filename.file.response);\r\n    }\r\n  };\r\n\r\n  const [images, setImages] = useState([]);\r\n\r\n  const onFinish = (values) => {\r\n    console.log(values);\r\n    axios\r\n      .post(\"/api/v1/images/save_image\", {\r\n        imageOwnerId: values.imageOwnerId,\r\n        imageReferenceId: values.imageReferenceId,\r\n        imagePath: uploadedImagePath,\r\n      })\r\n      .then((res) => {})\r\n      .catch((error) => console.log(error));\r\n  };\r\n\r\n  const onFinishFailed = (errorInfo) => {\r\n    console.log(\"fail\");\r\n    console.log(\"Failed:\", errorInfo);\r\n  };\r\n\r\n  const checkingValues = () => {\r\n    console.log(\"check\");\r\n    console.log(uploadedImagePath);\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <Row gutter={[16, 16]}>\r\n        <Col>\r\n          <Space style={{ width: \"100%\" }} size=\"large\">\r\n            <Upload\r\n              action=\"/api/v1/images/add_image\"\r\n              listType=\"picture\"\r\n              maxCount={1}\r\n              file={file}\r\n              onChange={checking}\r\n            >\r\n              <Button icon={<UploadOutlined />}>Upload Image (Max: 1)</Button>\r\n            </Upload>\r\n          </Space>\r\n        </Col>\r\n      </Row>\r\n      <Row gutter={[16, 16]}>\r\n        <Button onClick={viewFile}>Check Uploaded Image</Button>\r\n      </Row>\r\n      <Row gutter={[16, 16]}>\r\n        <Image\r\n          width={250}\r\n          height={250}\r\n          src={`/api/v1/images/${\r\n            uploadedImagePath ? uploadedImagePath : \"logo.png\"\r\n          }`}\r\n          style={{ borderColor: \"white\", border: \"10px\" }}\r\n        />\r\n      </Row>\r\n      <Row gutter={[16, 16]}>\r\n        <Form\r\n          name=\"basic\"\r\n          initialValues={{ remember: true }}\r\n          onFinish={onFinish}\r\n          onFinishFailed={onFinishFailed}\r\n        >\r\n          <Form.Item\r\n            label=\"Image Owner ID\"\r\n            name=\"imageOwnerId\"\r\n            rules={[\r\n              { required: true, message: \"Please input the Image owner Id!\" },\r\n            ]}\r\n          >\r\n            <Input />\r\n          </Form.Item>\r\n          <Form.Item\r\n            label=\"Image Reference ID\"\r\n            name=\"imageReferenceId\"\r\n            rules={[{ required: true, message: \"Please select image owner!\" }]}\r\n          >\r\n            <Radio.Group>\r\n              <Radio.Button value=\"1\">Driver</Radio.Button>\r\n              <Radio.Button value=\"2\">Jeepney</Radio.Button>\r\n              <Radio.Button value=\"3\">Barangay</Radio.Button>\r\n            </Radio.Group>\r\n          </Form.Item>\r\n\r\n          <Form.Item>\r\n            <Button\r\n              disabled={uploadedImagePath.length === 0}\r\n              onClick={onFinish}\r\n              type=\"primary\"\r\n              htmlType=\"submit\"\r\n            >\r\n              {uploadedImagePath ? \"Save Image\" : \"Choose an image\"}\r\n            </Button>\r\n          </Form.Item>\r\n        </Form>\r\n      </Row>\r\n      <Row>\r\n        <Col>\r\n          <ImageUploadDashboard />\r\n        </Col>\r\n      </Row>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default ImageUpload;\r\n"],"sourceRoot":""}