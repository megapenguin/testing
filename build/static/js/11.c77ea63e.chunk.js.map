{"version":3,"sources":["components/JeepneysTableList/JeepneysInfoModal.js","components/JeepneysTableList/AddJeepneyModal.js","components/JeepneysTableList/EditJeepneyModal.js","components/JeepneysTableList/AddJeepneyImageModal.js","components/JeepneysTableList/JeepneysTableList.js"],"names":["JeepneysInfoModal","props","useState","isModalVisible","setIsModalVisible","confirmLoading","setConfirmLoading","ifCanceled","setIfCanceled","images","setImages","type","className","onClick","axios","post","imageOwnerId","info","id","imageReferenceId","then","res","data","catch","error","console","log","UnorderedListOutlined","title","visible","onOk","passedData","setTimeout","onCancel","afterClose","afterClosing","footer","loading","success","content","danger","barangayId","plateNumber","jeepCapacity","map","image","index","md","span","height","width","src","imagePath","delete","params","fileName","fileId","imagesCopy","filter","handleDeleteImage","AddJeepneyModal","jeepneys","setJeepneys","uploadedImagePath","barangays","setBarangays","useEffect","get","Option","handleCancel","onFinish","values","jeepneysCopy","PlusOutlined","destroyOnClose","form","htmlType","layout","name","initialValues","remember","onFinishFailed","errorInfo","Item","label","rules","required","message","placeholder","style","onChange","value","barangay","barangayName","EditJeepneyModal","useForm","ifChanged","setIfChanged","setFieldsValue","EditOutlined","onValuesChange","changedValues","allValues","AddJeepneyImageModal","setFilename","setUploadedImagePath","uploadImageStatus","setUploadImageStatus","uploadFile","action","headers","authorization","file","status","fileList","UploadOutlined","itemLayout","size","onRemove","val","response","listType","showUploadList","showPreviewIcon","maxCount","JeepneysTableList","Search","dataFromModal","setDataFromModal","Title","d","modalClosed","justify","direction","onSearch","_res","allowClear","enterButton","level","dataSource","scroll","x","y","sticky","dataIndex","fixed","render"],"mappings":"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","file":"static/js/11.c77ea63e.chunk.js","sourcesContent":["import React, { useState, useEffect } from \"react\";\r\nimport { Modal, Button, Card, Image, Space, Col, Row, Typography } from \"antd\";\r\nimport { UnorderedListOutlined } from \"@ant-design/icons\";\r\nimport axios from \"axios\";\r\n\r\nfunction JeepneysInfoModal(props) {\r\n  const [isModalVisible, setIsModalVisible] = useState(false);\r\n  const [confirmLoading, setConfirmLoading] = useState(false);\r\n  const [ifCanceled, setIfCanceled] = useState(false);\r\n  const [jeepneys, setJeepneys] = useState([]);\r\n  const [images, setImages] = useState([]);\r\n  const [imagePath, setImagePath] = useState([]);\r\n\r\n  const showModal = () => {\r\n    setIsModalVisible(true);\r\n    axios\r\n      .post(\"/api/v1/images/search_images\", {\r\n        imageOwnerId: props.info.id,\r\n        imageReferenceId: 3,\r\n      })\r\n      .then((res) => {\r\n        let data = res.data;\r\n        setImages(data);\r\n      })\r\n      .catch((error) => console.log(error));\r\n  };\r\n\r\n  const handleOk = () => {\r\n    props.passedData(props.info);\r\n    setConfirmLoading(true);\r\n    setIfCanceled(false);\r\n    setTimeout(() => {\r\n      setIsModalVisible(false);\r\n      setConfirmLoading(false);\r\n    }, 2000);\r\n  };\r\n\r\n  const handleDelete = (id) => {\r\n    setConfirmLoading(true);\r\n    setIfCanceled(false);\r\n    setTimeout(() => {\r\n      setIsModalVisible(false);\r\n      setConfirmLoading(false);\r\n    }, 2000);\r\n    Modal.success({\r\n      content: \"Still in development\",\r\n    });\r\n    // axios\r\n    //   .delete(\"/api/v1/images/delete_image\", {\r\n    //     params: {\r\n    //       id,\r\n    //       referenceId: 3,\r\n    //     },\r\n    //   })\r\n    //   .then((res) => {\r\n    //     let imagesCopy = [...images];\r\n    //     imagesCopy = imagesCopy.filter(\r\n    //       (imagesCopy) =>\r\n    //         imagesCopy.imageOwnerId !== id && imagesCopy.imageReferenceId === 3\r\n    //     );\r\n    //     setImages(imagesCopy);\r\n    //     console.log(imagesCopy);\r\n    //   })\r\n    //   .catch((error) => console.log(error));\r\n\r\n    // axios\r\n    //   .delete(\"/api/v1/jeepneys/delete_jeep\", {\r\n    //     params: {\r\n    //       id,\r\n    //     },\r\n    //   })\r\n    //   .then((res) => {\r\n    //     let jeepneysCopy = [...jeepneys];\r\n\r\n    //     jeepneysCopy = jeepneysCopy.filter((jeepney) => jeepney.id !== id);\r\n    //     setJeepneys(jeepneysCopy);\r\n\r\n    //     console.log(jeepneysCopy);\r\n    //     Modal.success({\r\n    //       content: \"Jeepney has been Removed\",\r\n    //     });\r\n    //   })\r\n    //   .catch((error) => console.log(error));\r\n  };\r\n\r\n  const handleCancel = () => {\r\n    setIfCanceled(true);\r\n    setIsModalVisible(false);\r\n  };\r\n  const handleClose = () => {\r\n    if (ifCanceled) {\r\n    } else {\r\n      props.afterClosing();\r\n    }\r\n  };\r\n\r\n  const handleDeleteImage = (id, imagePath) => {\r\n    axios\r\n      .delete(\"/api/v1/images/delete_folder_image\", {\r\n        params: {\r\n          fileName: imagePath,\r\n          fileId: id,\r\n        },\r\n      })\r\n      .then((res) => {\r\n        let imagesCopy = [...images];\r\n        imagesCopy = imagesCopy.filter((image) => image.id !== id);\r\n        setImages(imagesCopy);\r\n        Modal.success({\r\n          content: \"Jeepney image has been removed\",\r\n        });\r\n      })\r\n      .catch((error) => console.log(error));\r\n\r\n    // axios\r\n    //   .delete(\"/api/v1/images/delete_image\", {\r\n    //     params: {\r\n    //       id,\r\n    //       referenceId: 1,\r\n    //     },\r\n    //   })\r\n    //   .then((res) => {\r\n    //\r\n    //   })\r\n    //   .catch((error) => console.log(error));\r\n  };\r\n  return (\r\n    <div>\r\n      <Space>\r\n        <Button\r\n          type=\"primary\"\r\n          className=\"modal-button-view\"\r\n          onClick={showModal}\r\n        >\r\n          <span className=\"desktop-view\">\r\n            <UnorderedListOutlined /> View\r\n          </span>\r\n          <span className=\"mobile-view\">\r\n            <UnorderedListOutlined />\r\n          </span>\r\n        </Button>\r\n\r\n        {/* <Button type=\"default\" onClick={showModal}>\r\n        Assign Driver\r\n      </Button> */}\r\n      </Space>\r\n      <Modal\r\n        title=\"Jeepney Information\"\r\n        visible={isModalVisible}\r\n        confirmLoading={confirmLoading}\r\n        onOk={handleOk}\r\n        onCancel={handleCancel}\r\n        afterClose={handleClose}\r\n        footer={[\r\n          <Button\r\n            className=\"modal-button\"\r\n            loading={confirmLoading}\r\n            onClick={() => handleDelete(props.info.id)}\r\n            danger\r\n          >\r\n            Remove\r\n          </Button>,\r\n        ]}\r\n      >\r\n        <p>\r\n          <h4>Barangay Id:</h4>\r\n          {props.info.barangayId}\r\n        </p>\r\n        <p>\r\n          <h4>Plate Number:</h4>\r\n          {props.info.plateNumber}\r\n        </p>\r\n        <p>\r\n          <h4>Jeep Capacity:</h4>\r\n          {props.info.jeepCapacity}\r\n        </p>\r\n        <h4>Uploaded Images: </h4>\r\n        <Card className=\"shadow-sm\">\r\n          <Row>\r\n            {images.map((image, index) => (\r\n              <Col key={index} md={{ span: 6 }}>\r\n                <br></br>\r\n                <Image\r\n                  height={100}\r\n                  width={100}\r\n                  src={`/api/v1/images/${\r\n                    image.imagePath ? image.imagePath : \"logo.png\"\r\n                  }`}\r\n                />\r\n                <Row>\r\n                  <br></br>\r\n                  <Button\r\n                    onClick={() => handleDeleteImage(image.id, image.imagePath)}\r\n                    danger\r\n                  >\r\n                    Delete\r\n                  </Button>\r\n                </Row>\r\n              </Col>\r\n            ))}\r\n          </Row>\r\n        </Card>\r\n      </Modal>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default JeepneysInfoModal;\r\n","import React, { useState, useEffect } from \"react\";\r\nimport { Form, Input, Modal, Button, Upload, Select } from \"antd\";\r\nimport { UploadOutlined, PlusOutlined } from \"@ant-design/icons\";\r\nimport axios from \"axios\";\r\n\r\nfunction AddJeepneyModal(props) {\r\n  const [isModalVisible, setIsModalVisible] = useState(false);\r\n  const [confirmLoading, setConfirmLoading] = useState(false);\r\n  const [ifCanceled, setIfCanceled] = useState(false);\r\n  const [jeepneys, setJeepneys] = useState([]);\r\n  const [file, setFile] = useState({});\r\n  const [filename, setFilename] = useState(\"Choose file\");\r\n  const [uploadedImagePath, setUploadedImagePath] = useState();\r\n  const [barangays, setBarangays] = useState([]);\r\n\r\n  const showModal = () => {\r\n    setIsModalVisible(true);\r\n    console.log(props.info);\r\n  };\r\n\r\n  useEffect(() => {\r\n    axios\r\n      .get(\"/api/v1/barangays/search_all_barangays\")\r\n      .then((res) => {\r\n        let data = res.data;\r\n        setBarangays(data);\r\n      })\r\n      .catch((error) => console.log(error));\r\n  }, []);\r\n  const { Option } = Select;\r\n\r\n  const checking = (file) => {\r\n    setFilename(file);\r\n  };\r\n\r\n  const handleCancel = () => {\r\n    setIfCanceled(true);\r\n    setIsModalVisible(false);\r\n  };\r\n  const handleClose = () => {\r\n    if (ifCanceled) {\r\n    } else {\r\n      props.afterClosing();\r\n    }\r\n  };\r\n\r\n  const onFinish = (values) => {\r\n    console.log(values);\r\n    props.passedData(props.info);\r\n    setConfirmLoading(true);\r\n    setIfCanceled(false);\r\n    setTimeout(() => {\r\n      setIsModalVisible(false);\r\n      setConfirmLoading(false);\r\n    }, 2000);\r\n    // setUploadedImagePath(filename.file.response.filePath);\r\n    axios\r\n      .post(\"/api/v1/jeepneys/add_jeep\", values)\r\n      .then((res) => {\r\n        let jeepneysCopy = [...jeepneys];\r\n        jeepneysCopy = [...jeepneysCopy, res.data];\r\n        console.log(jeepneysCopy);\r\n        setJeepneys(jeepneysCopy);\r\n        // console.log(filename.file.response);\r\n        Modal.success({\r\n          content: \"Successfully Added New Jeepney\",\r\n        });\r\n\r\n        axios.post(\"/api/v1/images/save_image\", {\r\n          imageOwnerId: res.data.id,\r\n          imageReferenceId: 3,\r\n          imagePath: uploadedImagePath,\r\n        });\r\n      })\r\n      .catch((error) => console.log(error));\r\n  };\r\n\r\n  const onFinishFailed = (errorInfo) => {\r\n    Modal.error({\r\n      content: \"Failure to Add New Jeepney\",\r\n    });\r\n    setTimeout(() => {\r\n      setIsModalVisible(true);\r\n      setConfirmLoading(false);\r\n    }, 2000);\r\n    console.log(\"fail\");\r\n    console.log(\"Failed:\", errorInfo);\r\n  };\r\n\r\n  const handleChange = (value) => {\r\n    console.log(`selected ${value}`);\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <Button type=\"primary\" className=\"modal-button-add\" onClick={showModal}>\r\n        <span className=\"desktop-view\">\r\n          <PlusOutlined /> Add Jeepney\r\n        </span>\r\n        <span className=\"mobile-view\">\r\n          <PlusOutlined />\r\n        </span>\r\n      </Button>\r\n\r\n      <Modal\r\n        title=\"Add Jeepney:\"\r\n        visible={isModalVisible}\r\n        confirmLoading={confirmLoading}\r\n        onOk={onFinish}\r\n        onCancel={handleCancel}\r\n        afterClose={handleClose}\r\n        destroyOnClose={true}\r\n        footer={[\r\n          <Button key=\"back\" className=\"modal-button\" onClick={handleCancel}>\r\n            Cancel\r\n          </Button>,\r\n          <Button\r\n            form=\"myForm\"\r\n            className=\"modal-button\"\r\n            key=\"submit\"\r\n            htmlType=\"submit\"\r\n            type=\"primary\"\r\n            loading={confirmLoading}\r\n            onClick={onFinish}\r\n          >\r\n            Add\r\n          </Button>,\r\n        ]}\r\n      >\r\n        <Form\r\n          layout=\"vertical\"\r\n          name=\"basic\"\r\n          initialValues={{ remember: true }}\r\n          onFinish={onFinish}\r\n          onFinishFailed={onFinishFailed}\r\n          id=\"myForm\"\r\n        >\r\n          <Form.Item\r\n            label=\"Barangay:\"\r\n            name=\"barangayId\"\r\n            rules={[\r\n              { required: true, message: \"Please input the Barangay's ID!\" },\r\n            ]}\r\n          >\r\n            <Select\r\n              placeholder=\"Select Barangay\"\r\n              style={{ width: \"100%\" }}\r\n              onChange={handleChange}\r\n            >\r\n              {barangays.map((barangay, index) => (\r\n                <Option value={barangay.id}>{barangay.barangayName}</Option>\r\n              ))}\r\n            </Select>\r\n          </Form.Item>\r\n\r\n          <Form.Item\r\n            label=\"Plate Number:\"\r\n            name=\"plateNumber\"\r\n            rules={[\r\n              { required: true, message: \"Please input the Plate Number!\" },\r\n            ]}\r\n          >\r\n            <Input />\r\n          </Form.Item>\r\n\r\n          <Form.Item\r\n            label=\"Jeep Capacity:\"\r\n            name=\"jeepCapacity\"\r\n            rules={[\r\n              { required: true, message: \"Please input the Jeep Capacity!\" },\r\n            ]}\r\n          >\r\n            <Input />\r\n          </Form.Item>\r\n          {/* <Upload\r\n            action=\"/api/v1/images/add_image\"\r\n            listType=\"picture\"\r\n            maxCount={1}\r\n            file={file}\r\n            onChange={checking}\r\n          >\r\n            <Button icon={<UploadOutlined />}>Upload Image (Max: 1)</Button>\r\n          </Upload> */}\r\n        </Form>\r\n      </Modal>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default AddJeepneyModal;\r\n","import React, { useState, useEffect } from \"react\";\r\nimport { Modal, Button, Form, Input, Select } from \"antd\";\r\nimport axios from \"axios\";\r\nimport { EditOutlined  } from \"@ant-design/icons\";\r\n\r\nfunction EditJeepneyModal(props) {\r\n  const [isModalVisible, setIsModalVisible] = useState(false);\r\n  const [form] = Form.useForm();\r\n  const [confirmLoading, setConfirmLoading] = useState(false);\r\n  const [ifCanceled, setIfCanceled] = useState(false);\r\n  const [ifChanged, setIfChanged] = useState();\r\n  const [barangays, setBarangays] = useState([]);\r\n\r\n  useEffect(() => {\r\n    axios\r\n      .get(\"/api/v1/barangays/search_all_barangays\")\r\n      .then((res) => {\r\n\r\n        let data = res.data;\r\n        setBarangays(data);\r\n      })\r\n      .catch((error) => console.log(error));\r\n  }, []);\r\n  const { Option } = Select;\r\n\r\n  const handleChange = (value) => {\r\n    console.log(`selected ${value}`);\r\n  };\r\n\r\n\r\n  const showModal = () => {\r\n    form.setFieldsValue({\r\n      id: props.info.id,\r\n      barangayId: props.info.barangayId,\r\n      plateNumber: props.info.plateNumber,\r\n      jeepCapacity: props.info.jeepCapacity,\r\n    });\r\n    setIsModalVisible(true);\r\n    setIfChanged(false);\r\n  };\r\n\r\n  const handleOk = () => {\r\n    setIsModalVisible(false);\r\n  };\r\n\r\n  const handleCancel = () => {\r\n    setIfCanceled(true);\r\n    setIsModalVisible(false);\r\n  };\r\n  const handleClose = () => {\r\n    if (ifCanceled) {\r\n    } else {\r\n      props.afterClosing();\r\n    }\r\n  };\r\n\r\n  const onFinish = (values) => {\r\n    //console.log(ifChanged);\r\n    setConfirmLoading(true);\r\n    setIfCanceled(false);\r\n    props.passedData(props.info);\r\n     axios\r\n      .post(\"/api/v1/jeepneys/update_jeepney\", {\r\n        id: props.info.id,\r\n        barangayId: values.barangayId,\r\n        plateNumber: values.plateNumber,\r\n        jeepCapacity: values.jeepCapacity,\r\n      })\r\n      .then((res) => {\r\n        setTimeout(() => {\r\n          setIsModalVisible(false);\r\n          setConfirmLoading(false);\r\n          \r\n        }, 2000);\r\n        {\r\n          ifChanged\r\n            ? Modal.success({\r\n                content: \"Successfully Updated Jeepney\",\r\n              })\r\n            : Modal.success({\r\n                content: \"Jeepney Info is up to date\",\r\n              });\r\n        }\r\n      })\r\n      .catch((error) => console.log(error));\r\n\r\n    //console.log(ifChanged);\r\n  };\r\n\r\n  const onFinishFailed = (errorInfo) => {\r\n    Modal.error({\r\n      content: \"Failure to Update Jeepney Info\",\r\n    });\r\n    setTimeout(() => {\r\n      setIsModalVisible(true);\r\n      setConfirmLoading(false);\r\n    }, 2000);\r\n    // console.log(\"Failed:\", errorInfo);\r\n  };\r\n  const onValuesChange = (changedValues, allValues) => {\r\n  console.log(\"Changed\", allValues, changedValues);\r\n    setIfChanged(true);\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <Button type=\"primary\" className=\"modal-button-edit\" onClick={showModal}>\r\n        <span className=\"desktop-view\"><EditOutlined /> Edit</span>\r\n        <span className=\"mobile-view\"><EditOutlined /></span>\r\n      </Button>\r\n      <Modal\r\n        title=\"Update Jeepney Info\"\r\n        confirmLoading={confirmLoading}\r\n        visible={isModalVisible}\r\n        onOk={onFinish}\r\n        onCancel={handleCancel}\r\n        afterClose={handleClose}\r\n        destroyOnClose={true}\r\n        footer={[\r\n          <Button key=\"back\" className=\"modal-button\" onClick={handleCancel}>\r\n            Cancel\r\n          </Button>,\r\n          <Button form=\"myForm\" className=\"modal-button\" htmlType=\"submit\" type=\"primary\">\r\n            Update\r\n          </Button>,\r\n        ]}\r\n      >\r\n        <Form\r\n          layout=\"vertical\"\r\n          name=\"basic\"\r\n          form={form}\r\n          initialValues={{ remember: true }}\r\n          onFinish={onFinish}\r\n          onFinishFailed={onFinishFailed}\r\n          onValuesChange={onValuesChange}\r\n          id=\"myForm\"\r\n        >\r\n          {/* <Form.Item label=\"Barangay ID:\" name=\"barangayId\">\r\n            <Input disabled={true} bordered={false} />\r\n          </Form.Item> */}\r\n          <Form.Item\r\n            label=\"Barangay:\"\r\n            name=\"barangayId\"\r\n            rules={[\r\n              { required: true, message: \"Please input the Barangay's ID!\" },\r\n            ]}\r\n          >\r\n            <Select\r\n              placeholder=\"Select Barangay\"\r\n              style={{ width: '100%' }}\r\n              onChange={handleChange}\r\n            >\r\n              {barangays.map((barangay, index) => (\r\n                <Option value={barangay.id}>{barangay.barangayName}</Option>\r\n              ))}\r\n            </Select>\r\n          </Form.Item>\r\n          <Form.Item\r\n            label=\"Plate Number:\"\r\n            name=\"plateNumber\"\r\n            rules={[\r\n              { required: true, message: \"Please input the Plate Number!\" },\r\n            ]}\r\n          >\r\n            <Input />\r\n          </Form.Item>\r\n\r\n          <Form.Item\r\n            label=\"Jeep Capacity:\"\r\n            name=\"jeepCapacity\"\r\n            rules={[\r\n              { required: true, message: \"Please input Jeep Capacity!\" },\r\n            ]}\r\n          >\r\n            <Input />\r\n          </Form.Item>\r\n        </Form>\r\n      </Modal>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default EditJeepneyModal;\r\n","import React, { useState } from \"react\";\r\nimport {\r\n  Modal,\r\n  Upload,\r\n  Button,\r\n  Space,\r\n  Row,\r\n  Col,\r\n  List,\r\n  Form,\r\n  Radio,\r\n  Input,\r\n  message,\r\n} from \"antd\";\r\nimport { UploadOutlined } from \"@ant-design/icons\";\r\nimport axios from \"axios\";\r\nimport { Content } from \"antd/lib/layout/layout\";\r\n\r\nfunction AddJeepneyImageModal(props) {\r\n  const [file, setFile] = useState({});\r\n  const [imageStatus, setImageStatus] = useState(false);\r\n  const [filename, setFilename] = useState(\"Choose file\");\r\n  const [uploadedImagePath, setUploadedImagePath] = useState(\"\");\r\n  const [uploadImageStatus, setUploadImageStatus] = useState(\"none\");\r\n  const [fetchImage, setFetchImage] = useState(\"\");\r\n  const [images, setImages] = useState([]);\r\n  const [info, setInfo] = useState([]);\r\n  const [ifCanceled, setIfCanceled] = useState(false);\r\n  const [isModalVisible, setIsModalVisible] = useState(false);\r\n  const [form] = Form.useForm();\r\n  const [confirmLoading, setConfirmLoading] = useState(false);\r\n\r\n  const showModal = () => {\r\n    form.setFieldsValue({\r\n      imageOwnerId: props.info.id,\r\n      imageReferenceId: 3,\r\n    });\r\n    setUploadedImagePath();\r\n    setUploadImageStatus(\"removed\");\r\n    setFilename(\"Choose file\");\r\n    setIsModalVisible(true);\r\n    console.log(props.info);\r\n  };\r\n\r\n  const checking = (file) => {\r\n    setFilename(file);\r\n  };\r\n  const viewFile = () => {\r\n    {\r\n      (() => {\r\n        switch (uploadImageStatus) {\r\n          case \"done\":\r\n            return (\r\n              setUploadedImagePath(filename.file.response.filePath),\r\n              console.log(\"done\")\r\n            );\r\n\r\n          case \"removed\":\r\n            return console.log(\"removed\");\r\n\r\n          case \"\":\r\n            return console.log(\"none\");\r\n        }\r\n      })();\r\n    }\r\n  };\r\n\r\n  const handleOk = () => {\r\n    setIsModalVisible(false);\r\n  };\r\n\r\n  const handleCancel = () => {\r\n    setIfCanceled(true);\r\n\r\n    setTimeout(() => {\r\n      setIsModalVisible(false);\r\n      setConfirmLoading(false);\r\n    }, 500);\r\n  };\r\n\r\n  const handleClose = () => {\r\n    setConfirmLoading(true);\r\n    setIfCanceled(false);\r\n  };\r\n\r\n  const onFinish = (values) => {\r\n    if (uploadImageStatus == \"done\") {\r\n      axios\r\n        .post(\"/api/v1/images/save_image\", {\r\n          imageOwnerId: props.info.id,\r\n          imageReferenceId: 3,\r\n          imagePath: uploadedImagePath,\r\n        })\r\n        .then((res) => {\r\n          message.success(\"Successfully Saved\");\r\n          setTimeout(() => {\r\n            setIsModalVisible(false);\r\n            setConfirmLoading(false);\r\n          }, 500);\r\n          setUploadedImagePath(\"\");\r\n        })\r\n        .catch((error) => console.log(error));\r\n    } else {\r\n      message.error(\"Image Saving Error\");\r\n      // console.log(\"Uploaded image is removed\");\r\n    }\r\n  };\r\n\r\n  const onFinishFailed = (errorInfo) => {\r\n    console.log(\"fail\");\r\n    console.log(\"Failed:\", errorInfo);\r\n  };\r\n\r\n  const removeImage = (val) => {\r\n    //console.log(\"Removed image\", val.response.filePath);\r\n    axios\r\n      .delete(\"/api/v1/images/delete_folder_image\", {\r\n        params: {\r\n          fileName: val.response.imagePath,\r\n          fileId: val.response.id,\r\n        },\r\n      })\r\n      .then((res) => {\r\n        setUploadImageStatus(\"removed\");\r\n        // console.log(res.data);\r\n      })\r\n      .catch((error) => console.log(error));\r\n    setUploadedImagePath();\r\n    message.error(`File removed Successfully.`);\r\n  };\r\n\r\n  const uploadFile = {\r\n    name: \"file\",\r\n    action: \"/api/v1/images/add_image\",\r\n    headers: {\r\n      authorization: \"authorization-text\",\r\n    },\r\n    data: { imageOwnerId: props.info.id, imageReferenceId: 3 },\r\n    onChange(info) {\r\n      if (info.file.status !== \"uploading\") {\r\n        console.log(\"uploading\", info.file, info.fileList);\r\n      }\r\n      if (info.file.status === \"done\") {\r\n        message.success(`${info.file.name} file uploaded Successfully.`);\r\n      } else if (info.file.status === \"error\") {\r\n        message.error(`${info.file.name} file upload Failed.`);\r\n      }\r\n      setUploadImageStatus(info.file.status);\r\n      setFilename(info);\r\n    },\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <Button type=\"primary\" className=\"modal-button-upload\" onClick={showModal}>\r\n        <span className=\"desktop-view\"><UploadOutlined /> Upload</span>\r\n        <span className=\"mobile-view\"><UploadOutlined /></span>\r\n      </Button>\r\n      <Modal\r\n        title=\"Jeepney Image Upload\"\r\n        confirmLoading={confirmLoading}\r\n        visible={isModalVisible}\r\n        onOk={onFinish}\r\n        onCancel={handleCancel}\r\n        afterClose={handleClose}\r\n        destroyOnClose={true}\r\n        footer={[\r\n          <Button key=\"back\" className=\"modal-button\"  type=\"danger\" onClick={handleCancel}>\r\n            Close\r\n          </Button>,\r\n        ]}\r\n      >\r\n        <List itemLayout=\"vertical\">\r\n          <List.Item>\r\n          <h4>Plate Number: </h4>\r\n          {props.info.plateNumber}\r\n          </List.Item>\r\n          <List.Item>\r\n          <h4>Image Reference Name: </h4>\r\n          Jeepney\r\n          </List.Item>\r\n        </List>\r\n        <Row>\r\n          <Space style={{ width: \"100%\" }} size=\"large\">\r\n            <Upload\r\n              {...uploadFile}\r\n              onRemove={removeImage}\r\n              listType=\"picture-card\"\r\n              showUploadList={{showPreviewIcon:false}}\r\n              maxCount={5}\r\n            >\r\n                <Space>\r\n                  <UploadOutlined/>\r\n               Upload\r\n               </Space>\r\n            </Upload>\r\n          </Space>\r\n        </Row>\r\n        {/* <Row>\r\n          <Form\r\n            name=\"basic\"\r\n            form={form}\r\n            layout={\"horizontal\"}\r\n            initialValues={{ remember: true }}\r\n            onFinish={onFinish}\r\n            onFinishFailed={onFinishFailed}\r\n          >\r\n            <Form.Item label=\"Image Owner ID: \" name=\"imageOwnerId\">\r\n               {props.info.id}\r\n            </Form.Item>\r\n            <Form.Item label=\"Image Reference: \" name=\"imageReferenceId\">\r\n               Barangay\r\n            </Form.Item>\r\n          </Form>\r\n        </Row> */}\r\n      </Modal>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default AddJeepneyImageModal;\r\n","import React, { useEffect, useState } from \"react\";\r\nimport { Table, Space, Input, Row, Col, Divider, Typography } from \"antd\";\r\nimport axios from \"axios\";\r\nimport Column from \"antd/lib/table/Column\";\r\nimport ColumnGroup from \"antd/lib/table/ColumnGroup\";\r\nimport JeepneysInfoModal from \"./JeepneysInfoModal\";\r\nimport AddJeepneyModal from \"./AddJeepneyModal\";\r\nimport EditJeepneyModal from \"./EditJeepneyModal\";\r\nimport AddJeepneyImageModal from \"./AddJeepneyImageModal\";\r\n\r\nfunction JeepneysTableList() {\r\n  const [jeepneys, setJeepneys] = useState([]);\r\n  const { Search } = Input;\r\n  const [dataFromModal, setDataFromModal] = useState(\"\");\r\n  const { Title } = Typography;\r\n\r\n  useEffect(() => {\r\n    axios\r\n      .get(\"/api/v1/jeepneys/\")\r\n      .then((res) => {\r\n        let data = res.data;\r\n        data = data.map((d) => {\r\n          if (d.barangay === null) {\r\n            return { ...d, barangayName: \"None Assigned\" };\r\n          } else {\r\n            return { ...d, barangayName: d.barangay.barangayName };\r\n          }\r\n        });\r\n\r\n        setJeepneys(data);\r\n      })\r\n      .catch((error) => console.log(error));\r\n  }, []);\r\n\r\n  const onSearch = (value) => {\r\n    axios\r\n      .post(\"/api/v1/jeepneys/search_jeepneys\", { value: value })\r\n      .then((_res) => {\r\n        console.log(_res);\r\n        let data = _res.data;\r\n        data = data.map((d) => {\r\n          if (d.barangay === null) {\r\n            return { ...d, barangayName: \"None Assigned\" };\r\n          } else {\r\n            return { ...d, barangayName: d.barangay.barangayName };\r\n          }\r\n        });\r\n\r\n        setJeepneys(data);\r\n        console.log(\"success\");\r\n      });\r\n\r\n    console.log(value);\r\n  };\r\n\r\n  const modalClosed = () => {\r\n    console.log(\"Passed data from modal\", dataFromModal);\r\n    axios.get(\"/api/v1/jeepneys/\").then((res) => {\r\n      let data = res.data;\r\n      data = data.map((d) => {\r\n        if (d.barangay === null) {\r\n          return { ...d, barangayName: \"None Assigned\" };\r\n        } else {\r\n          return { ...d, barangayName: d.barangay.barangayName };\r\n        }\r\n      });\r\n\r\n      setJeepneys(data);\r\n    });\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <Row justify=\"space-between\">\r\n        <Col span={4}>\r\n          <Space direction=\"vertical\">\r\n            <Search\r\n              placeholder=\"Search Jeepney\"\r\n              onSearch={onSearch}\r\n              allowClear={true}\r\n              enterButton\r\n            />\r\n          </Space>\r\n        </Col>\r\n        <Col span={4}>\r\n          <AddJeepneyModal\r\n            info={\"\"}\r\n            passedData={setDataFromModal}\r\n            afterClosing={modalClosed}\r\n          />\r\n        </Col>\r\n      </Row>\r\n      <Divider>\r\n        <Title level={4}>List of Jeepneys</Title>\r\n      </Divider>\r\n      <Row>\r\n        <Table dataSource={jeepneys} scroll={{ x: 1000, y: 500 }} sticky>\r\n          <Column\r\n            title=\"Barangay\"\r\n            dataIndex=\"barangayName\"\r\n            key=\"barangayId\"\r\n          ></Column>\r\n          <ColumnGroup\r\n            title=\"Plate Number\"\r\n            dataIndex=\"plateNumber\"\r\n            key=\"plateNumber\"\r\n          ></ColumnGroup>\r\n          <ColumnGroup\r\n            title=\"Jeep Capacity\"\r\n            dataIndex=\"jeepCapacity\"\r\n            key=\"jeepCapacity\"\r\n          ></ColumnGroup>\r\n          {/* <ColumnGroup\r\n            title=\"Current Driver\"\r\n            dataIndex=\"currentDriver\"\r\n            key=\"currentDriver\"\r\n          ></ColumnGroup> */}\r\n          <ColumnGroup\r\n            title=\"Actions\"\r\n            key=\"actions\"\r\n            fixed=\"right\"\r\n            width=\"35vh\"\r\n            render={(value) => (\r\n              <Space>\r\n                <JeepneysInfoModal\r\n                  info={value}\r\n                  passedData={setDataFromModal}\r\n                  afterClosing={modalClosed}\r\n                />\r\n                <EditJeepneyModal\r\n                  info={value}\r\n                  passedData={setDataFromModal}\r\n                  afterClosing={modalClosed}\r\n                />\r\n                <AddJeepneyImageModal info={value} />\r\n              </Space>\r\n            )}\r\n          ></ColumnGroup>\r\n        </Table>\r\n      </Row>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default JeepneysTableList;\r\n"],"sourceRoot":""}