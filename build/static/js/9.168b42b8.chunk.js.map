{"version":3,"sources":["components/DriversTableList/DriversInfoModal.js","components/DriversTableList/AddDriverModal.js","components/DriversTableList/AddDriverImageModal.js","components/DriversTableList/EditDriverModal.js","components/DriversTableList/DriversTableList.js"],"names":["DriversInfoModal","props","useState","isModalVisible","setIsModalVisible","confirmLoading","setConfirmLoading","ifCanceled","setIfCanceled","drivers","setDrivers","images","setImages","type","className","onClick","axios","post","imageOwnerId","info","id","imageReferenceId","then","res","data","catch","error","console","log","UnorderedListOutlined","title","visible","onOk","passedData","setTimeout","onCancel","afterClose","afterClosing","footer","loading","delete","params","referenceId","imagesCopy","filter","driversCopy","driver","success","content","danger","firstName","middleName","lastName","contactNumber","address","email","map","image","index","md","span","height","width","src","imagePath","AddDriverModal","handleCancel","onFinish","values","PlusOutlined","destroyOnClose","form","htmlType","layout","name","initialValues","remember","onFinishFailed","errorInfo","Item","label","rules","required","message","AddDriverImageModal","setFilename","uploadedImagePath","setUploadedImagePath","uploadImageStatus","setUploadImageStatus","useForm","uploadFile","action","headers","authorization","onChange","file","status","fileList","setFieldsValue","UploadOutlined","itemLayout","style","size","onRemove","val","fileName","response","fileId","listType","showUploadList","showPreviewIcon","maxCount","EditDriverModal","ifChanged","setIfChanged","EditOutlined","onValuesChange","changedValues","allValues","disabled","bordered","DriversTableList","Search","dataFromModal","setDataFromModal","useEffect","get","modalClosed","justify","direction","placeholder","onSearch","value","_res","allowClear","enterButton","orientation","dataSource","scroll","x","y","sticky","dataIndex","fixed","render"],"mappings":"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","file":"static/js/9.168b42b8.chunk.js","sourcesContent":["import React, { useState } from \"react\";\r\nimport { Modal, Button, Image, Card, Col, Row } from \"antd\";\r\nimport { UnorderedListOutlined } from \"@ant-design/icons\";\r\nimport axios from \"axios\";\r\n\r\nfunction DriversInfoModal(props) {\r\n  const [isModalVisible, setIsModalVisible] = useState(false);\r\n  const [modalValue, setModalValue] = useState(\"\");\r\n  const [confirmLoading, setConfirmLoading] = useState(false);\r\n  const [ifCanceled, setIfCanceled] = useState(false);\r\n  const [drivers, setDrivers] = useState([]);\r\n  const [images, setImages] = useState([]);\r\n  const [imagePath, setImagePath] = useState([]);\r\n\r\n  const showModal = () => {\r\n    setIsModalVisible(true);\r\n    axios\r\n      .post(\"/api/v1/images/search_images\", {\r\n        imageOwnerId: props.info.id,\r\n        imageReferenceId: 2,\r\n      })\r\n      .then((res) => {\r\n        let data = res.data;\r\n        setImages(data);\r\n        //console.log(\"images\", images);\r\n        // let imagesCopy = [...images];\r\n        // imagesCopy = imagesCopy.find(\r\n        //   (imagesCopy) =>\r\n        //     imagesCopy.imageOwnerId === props.info.id &&\r\n        //     imagesCopy.imageReferenceId === 1\r\n        // );\r\n        //setImagePath(imagesCopy.imagePath);\r\n      })\r\n      .catch((error) => console.log(error));\r\n  };\r\n\r\n  const handleOk = () => {\r\n    props.passedData(props.info);\r\n\r\n    setConfirmLoading(true);\r\n    setIfCanceled(false);\r\n    setTimeout(() => {\r\n      setIsModalVisible(false);\r\n      setConfirmLoading(false);\r\n    }, 2000);\r\n  };\r\n\r\n  const handleDelete = (id) => {\r\n    setConfirmLoading(true);\r\n    setIfCanceled(false);\r\n    setTimeout(() => {\r\n      setIsModalVisible(false);\r\n      setConfirmLoading(false);\r\n    }, 2000);\r\n    //console.log(id);\r\n    axios\r\n      .delete(\"/api/v1/images/delete_image\", {\r\n        params: {\r\n          id,\r\n          referenceId: 1,\r\n        },\r\n      })\r\n      .then((res) => {\r\n        let imagesCopy = [...images];\r\n        imagesCopy = imagesCopy.filter(\r\n          (imagesCopy) =>\r\n            imagesCopy.imageOwnerId !== id && imagesCopy.imageReferenceId === 2\r\n        );\r\n        setImages(imagesCopy);\r\n        console.log(imagesCopy);\r\n      })\r\n      .catch((error) => console.log(error));\r\n\r\n    axios\r\n      .delete(\"/api/v1/drivers/delete_driver\", {\r\n        params: {\r\n          id,\r\n        },\r\n      })\r\n      .then((res) => {\r\n        let driversCopy = [...drivers];\r\n        driversCopy = driversCopy.filter((driver) => driver.id !== id);\r\n        setDrivers(driversCopy);\r\n        //console.log(driversCopy);\r\n\r\n        Modal.success({\r\n          content: \"Driver has been Removed\",\r\n        });\r\n      })\r\n      .catch((error) => console.log(error));\r\n  };\r\n\r\n  const handleCancel = () => {\r\n    setIfCanceled(true);\r\n    setIsModalVisible(false);\r\n  };\r\n  const handleClose = () => {\r\n    if (ifCanceled) {\r\n    } else {\r\n      props.afterClosing();\r\n    }\r\n  };\r\n\r\n  const handleDeleteImage = (id) => {\r\n    axios\r\n      .delete(\"/api/v1/images/delete_image\", {\r\n        params: {\r\n          id,\r\n          referenceId: 1,\r\n        },\r\n      })\r\n      .then((res) => {\r\n        let imagesCopy = [...images];\r\n        imagesCopy = imagesCopy.filter((image) => image.id !== id);\r\n        setImages(imagesCopy);\r\n        Modal.success({\r\n          content: \"Driver image has been removed\",\r\n        });\r\n      })\r\n      .catch((error) => console.log(error));\r\n  };\r\n  return (\r\n    <div>\r\n      <Button type=\"primary\" className=\"modal-button\" onClick={showModal}>\r\n        <span className=\"desktop-view\">\r\n          <UnorderedListOutlined /> View\r\n        </span>\r\n        <span className=\"mobile-view\">\r\n          <UnorderedListOutlined />\r\n        </span>\r\n      </Button>\r\n      <Modal\r\n        title=\"Driver Information\"\r\n        visible={isModalVisible}\r\n        confirmLoading={confirmLoading}\r\n        onOk={handleOk}\r\n        onCancel={handleCancel}\r\n        afterClose={handleClose}\r\n        footer={[\r\n          <Button\r\n            className=\"modal-button\"\r\n            loading={confirmLoading}\r\n            onClick={() => handleDelete(props.info.id)}\r\n            danger\r\n          >\r\n            Remove\r\n          </Button>,\r\n        ]}\r\n      >\r\n        <p>\r\n          <h4>ID:</h4>\r\n          {props.info.id}\r\n        </p>\r\n        <p>\r\n          <h4>Name:</h4>\r\n          {props.info.firstName} {props.info.middleName} {props.info.lastName}\r\n        </p>\r\n        <p>\r\n          <h4>Contact Number:</h4>\r\n          {props.info.contactNumber}\r\n        </p>\r\n        <p>\r\n          <h4>Address: </h4>\r\n          {props.info.address}\r\n        </p>\r\n        <p>\r\n          <h4>Email Address: </h4>\r\n          {props.info.email}\r\n        </p>\r\n        <h4>Uploaded Images: </h4>\r\n        <Card className=\"shadow-sm\">\r\n          <Row>\r\n            {images.map((image, index) => (\r\n              <Col key={index} md={{ span: 6 }}>\r\n                <br></br>\r\n                <Image\r\n                  height={100}\r\n                  width={100}\r\n                  src={`/api/v1/images/${\r\n                    image.imagePath ? image.imagePath : \"logo.png\"\r\n                  }`}\r\n                />\r\n                <Row>\r\n                  <br></br>\r\n                  <Button onClick={() => handleDeleteImage(image.id)} danger>\r\n                    Delete\r\n                  </Button>\r\n                </Row>\r\n              </Col>\r\n            ))}\r\n          </Row>\r\n        </Card>\r\n      </Modal>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default DriversInfoModal;\r\n","import React, { useState } from \"react\";\r\nimport { Form, Input, Modal, Button, Upload, Space } from \"antd\";\r\nimport { PlusOutlined } from \"@ant-design/icons\";\r\nimport axios from \"axios\";\r\n\r\nfunction AddDriverModal(props) {\r\n  const [isModalVisible, setIsModalVisible] = useState(false);\r\n  const [confirmLoading, setConfirmLoading] = useState(false);\r\n  const [ifCanceled, setIfCanceled] = useState(false);\r\n  const [drivers, setDrivers] = useState([]);\r\n  const [file, setFile] = useState({});\r\n  const [filename, setFilename] = useState(\"Choose file\");\r\n  const [uploadedImagePath, setUploadedImagePath] = useState();\r\n\r\n  const checking = (file) => {\r\n    setFilename(file);\r\n    //console.log(filename);\r\n  };\r\n  const unchecking = () => {\r\n    setFilename(\"Choose file\");\r\n    //console.log(filename);\r\n  };\r\n  const viewFile = () => {\r\n    if (filename == \"Choose file\") {\r\n      //console.log(\"No image selected\");\r\n    } else {\r\n      setUploadedImagePath(filename.file.response.filePath);\r\n      //console.log(filename.file.response);\r\n    }\r\n  };\r\n  const showModal = () => {\r\n    setIsModalVisible(true);\r\n    //console.log(props.info);\r\n  };\r\n\r\n  const handleCancel = () => {\r\n    setIfCanceled(true);\r\n    setIsModalVisible(false);\r\n  };\r\n  const handleClose = () => {\r\n    if (ifCanceled) {\r\n    } else {\r\n      props.afterClosing();\r\n    }\r\n  };\r\n\r\n  const onFinish = (values) => {\r\n    console.log(values);\r\n    props.passedData(props.info);\r\n    setConfirmLoading(true);\r\n    setIfCanceled(false);\r\n    setTimeout(() => {\r\n      setIsModalVisible(false);\r\n      setConfirmLoading(false);\r\n    }, 2000);\r\n\r\n    axios\r\n      .post(\"/api/v1/drivers/add_driver\", values)\r\n      .then((res) => {\r\n        // let driversCopy = [...drivers];\r\n        // driversCopy = [...driversCopy, res.data];\r\n        // //console.log(driversCopy);\r\n        // setDrivers(driversCopy);\r\n        // setFilename(file);\r\n        Modal.success({\r\n          content: \"Successfully Added New Driver\",\r\n        });\r\n        // setUploadedImagePath(filename.file.response.filePath);\r\n        // //console.log(uploadedImagePath);\r\n        // axios.post(\"/api/v1/images/save_image\", {\r\n        //   imageOwnerId: res.data.id,\r\n        //   imageReferenceId: 1,\r\n        //   imagePath: uploadedImagePath,\r\n        // });\r\n      })\r\n      .catch((error) => console.log(error));\r\n  };\r\n\r\n  const onFinishFailed = (errorInfo) => {\r\n    Modal.error({\r\n      content: \"Failure to Add New Driver\",\r\n    });\r\n    setTimeout(() => {\r\n      setIsModalVisible(true);\r\n      setConfirmLoading(false);\r\n    }, 2000);\r\n    //console.log(\"Failed:\", errorInfo);\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <Button type=\"primary\" className=\"modal-button-add\" onClick={showModal}>\r\n        <span className=\"desktop-view\"><PlusOutlined /> Add Driver</span>\r\n        <span className=\"mobile-view\"><PlusOutlined /></span>\r\n      </Button>\r\n\r\n      <Modal\r\n        title=\"Add Driver:\"\r\n        visible={isModalVisible}\r\n        confirmLoading={confirmLoading}\r\n        onOk={onFinish}\r\n        onCancel={handleCancel}\r\n        afterClose={handleClose}\r\n        destroyOnClose={true}\r\n        footer={[\r\n          <Button key=\"back\" className=\"modal-button\"  onClick={handleCancel}>\r\n            Cancel\r\n          </Button>,\r\n          <Button\r\n            form=\"myForm\"\r\n            key=\"submit\"\r\n            htmlType=\"submit\"\r\n            type=\"primary\"\r\n            className=\"modal-button\" \r\n            loading={confirmLoading}\r\n            onClick={onFinish}\r\n          >\r\n            Add\r\n          </Button>,\r\n        ]}\r\n      >\r\n        <Form\r\n          layout=\"vertical\"\r\n          name=\"basic\"\r\n          initialValues={{ remember: true }}\r\n          onFinish={onFinish}\r\n          onFinishFailed={onFinishFailed}\r\n          id=\"myForm\"\r\n        >\r\n          <Form.Item\r\n            label=\"First Name\"\r\n            name=\"firstName\"\r\n            rules={[\r\n              { required: true, message: \"Please input your Firstname!\" },\r\n            ]}\r\n          >\r\n            <Input />\r\n          </Form.Item>\r\n\r\n          <Form.Item\r\n            label=\"Middle Name\"\r\n            name=\"middleName\"\r\n            rules={[\r\n              { required: true, message: \"Please input your Middlename!\" },\r\n            ]}\r\n          >\r\n            <Input />\r\n          </Form.Item>\r\n\r\n          <Form.Item\r\n            label=\"Last Name\"\r\n            name=\"lastName\"\r\n            rules={[{ required: true, message: \"Please input your Lastname!\" }]}\r\n          >\r\n            <Input />\r\n          </Form.Item>\r\n\r\n          <Form.Item\r\n            label=\"Address\"\r\n            name=\"address\"\r\n            rules={[{ required: true, message: \"Please input your Address!\" }]}\r\n          >\r\n            <Input />\r\n          </Form.Item>\r\n\r\n          <Form.Item\r\n            label=\"Contact Number\"\r\n            name=\"contactNumber\"\r\n            rules={[\r\n              { required: true, message: \"Please input your Contact Number!\" },\r\n            ]}\r\n          >\r\n            <Input />\r\n          </Form.Item>\r\n\r\n          <Form.Item\r\n            label=\"Generate Password\"\r\n            name=\"generatePassword\"\r\n            rules={[{ required: true, message: \"Please input your password!\" }]}\r\n          >\r\n            <Input />\r\n          </Form.Item>\r\n\r\n          <Form.Item\r\n            label=\"Email\"\r\n            name=\"email\"\r\n            rules={[\r\n              {\r\n                required: true,\r\n                type: \"email\",\r\n                message: \"Please input your Email!\",\r\n              },\r\n            ]}\r\n          >\r\n            <Input />\r\n          </Form.Item>\r\n          {/* <Upload\r\n            action=\"/api/v1/images/add_image\"\r\n            listType=\"picture\"\r\n            maxCount={1}\r\n            file={file}\r\n            onChange={checking}\r\n            onRemove={unchecking}\r\n          >\r\n            <Button>Choose Image (Max: 1)</Button>\r\n          </Upload>\r\n          <Space>\r\n            <Button onClick={viewFile} icon={<UploadOutlined />}>\r\n              Upload\r\n            </Button>\r\n          </Space> */}\r\n        </Form>\r\n      </Modal>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default AddDriverModal;\r\n","import React, { useState } from \"react\";\r\nimport {\r\n  Modal,\r\n  Upload,\r\n  Button,\r\n  Space,\r\n  Row,\r\n  Col,\r\n  List,\r\n  Form,\r\n  Radio,\r\n  Input,\r\n  message,\r\n} from \"antd\";\r\nimport { UploadOutlined } from \"@ant-design/icons\";\r\nimport axios from \"axios\";\r\nimport { Content } from \"antd/lib/layout/layout\";\r\n\r\nfunction AddDriverImageModal(props) {\r\n  const [file, setFile] = useState({});\r\n  const [imageStatus, setImageStatus] = useState(false);\r\n  const [filename, setFilename] = useState(\"Choose file\");\r\n  const [uploadedImagePath, setUploadedImagePath] = useState(\"\");\r\n  const [uploadImageStatus, setUploadImageStatus] = useState(\"none\");\r\n  const [fetchImage, setFetchImage] = useState(\"\");\r\n  const [images, setImages] = useState([]);\r\n  const [info, setInfo] = useState([]);\r\n  const [ifCanceled, setIfCanceled] = useState(false);\r\n  const [isModalVisible, setIsModalVisible] = useState(false);\r\n  const [form] = Form.useForm();\r\n  const [confirmLoading, setConfirmLoading] = useState(false);\r\n\r\n  const showModal = () => {\r\n    form.setFieldsValue({\r\n      imageOwnerId: props.info.id,\r\n      imageReferenceId: 2,\r\n    });\r\n    setUploadedImagePath();\r\n    setUploadImageStatus(\"removed\");\r\n    setFilename(\"Choose file\");\r\n    setIsModalVisible(true);\r\n    console.log(props.info);\r\n  };\r\n\r\n  const checking = (file) => {\r\n    setFilename(file);\r\n  };\r\n  const viewFile = () => {\r\n    {\r\n      (() => {\r\n        switch (uploadImageStatus) {\r\n          case \"done\":\r\n            return (\r\n              setUploadedImagePath(filename.file.response.filePath),\r\n              console.log(\"done\")\r\n            );\r\n\r\n          case \"removed\":\r\n            return console.log(\"removed\");\r\n\r\n          case \"\":\r\n            return console.log(\"none\");\r\n        }\r\n      })();\r\n    }\r\n  };\r\n\r\n  const handleOk = () => {\r\n    setIsModalVisible(false);\r\n  };\r\n\r\n  const handleCancel = () => {\r\n    setIfCanceled(true);\r\n\r\n    setTimeout(() => {\r\n      setIsModalVisible(false);\r\n      setConfirmLoading(false);\r\n    }, 500);\r\n  };\r\n\r\n  const handleClose = () => {\r\n    setConfirmLoading(true);\r\n    setIfCanceled(false);\r\n  };\r\n\r\n  const onFinish = (values) => {\r\n    if (uploadImageStatus == \"done\") {\r\n      axios\r\n        .post(\"/api/v1/images/save_image\", {\r\n          imageOwnerId: props.info.id,\r\n          imageReferenceId: 2,\r\n          imagePath: uploadedImagePath,\r\n        })\r\n        .then((res) => {\r\n          message.success(\"Successfully Saved\");\r\n          setTimeout(() => {\r\n            setIsModalVisible(false);\r\n            setConfirmLoading(false);\r\n          }, 500);\r\n          setUploadedImagePath(\"\");\r\n        })\r\n        .catch((error) => console.log(error));\r\n    } else {\r\n      message.error(\"Image Saving Error\");\r\n      // console.log(\"Uploaded image is removed\");\r\n    }\r\n  };\r\n\r\n  const onFinishFailed = (errorInfo) => {\r\n    console.log(\"fail\");\r\n    console.log(\"Failed:\", errorInfo);\r\n  };\r\n\r\n  const removeImage = (val) => {\r\n    //console.log(\"Removed image\", val.response.filePath);\r\n    axios\r\n      .delete(\"/api/v1/images/delete_folder_image\", {\r\n        params: {\r\n          fileName: val.response.imagePath,\r\n          fileId: val.response.id,\r\n        },\r\n      })\r\n      .then((res) => {\r\n        setUploadImageStatus(\"removed\");\r\n        // console.log(res.data);\r\n      })\r\n      .catch((error) => console.log(error));\r\n    setUploadedImagePath();\r\n    message.error(`File removed Successfully.`);\r\n  };\r\n\r\n  const uploadFile = {\r\n    name: \"file\",\r\n    action: \"/api/v1/images/add_image\",\r\n    headers: {\r\n      authorization: \"authorization-text\",\r\n    },\r\n    data: { imageOwnerId: props.info.id, imageReferenceId: 2 },\r\n    onChange(info) {\r\n      if (info.file.status !== \"uploading\") {\r\n        console.log(\"uploading\", info.file, info.fileList);\r\n      }\r\n      if (info.file.status === \"done\") {\r\n        message.success(`${info.file.name} file uploaded Successfully.`);\r\n      } else if (info.file.status === \"error\") {\r\n        message.error(`${info.file.name} file upload Failed.`);\r\n      }\r\n      setUploadImageStatus(info.file.status);\r\n      setFilename(info);\r\n    },\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <Button type=\"primary\" className=\"modal-button\" onClick={showModal}>\r\n        <span className=\"desktop-view\"><UploadOutlined /> Upload</span>\r\n        <span className=\"mobile-view\"><UploadOutlined /></span>\r\n      </Button>\r\n      <Modal\r\n        title=\"Driver Image Upload\"\r\n        confirmLoading={confirmLoading}\r\n        visible={isModalVisible}\r\n        onOk={onFinish}\r\n        onCancel={handleCancel}\r\n        afterClose={handleClose}\r\n        destroyOnClose={true}\r\n        footer={[\r\n          <Button key=\"back\" className=\"modal-button\"  type=\"danger\" onClick={handleCancel}>\r\n            Close\r\n          </Button>,\r\n        ]}\r\n      >\r\n        <List itemLayout=\"vertical\">\r\n          <List.Item>\r\n          <h4>Image Driver ID: </h4>\r\n          {props.info.id}\r\n          </List.Item>\r\n          <List.Item>\r\n          <h4>Image Driver Name: </h4>\r\n          {props.info.firstName} {props.info.firstName} {props.info.firstName}\r\n          </List.Item>\r\n          <List.Item>\r\n          <h4>Image Reference Name: </h4>\r\n          Driver\r\n          </List.Item>\r\n        </List>\r\n        <Row>\r\n          <Space style={{ width: \"100%\" }} size=\"large\">\r\n            <Upload\r\n              {...uploadFile}\r\n              onRemove={removeImage}\r\n              listType=\"picture-card\"\r\n              showUploadList={{showPreviewIcon:false}}\r\n              maxCount={5}\r\n            >\r\n                <Space>\r\n                  <UploadOutlined/>\r\n               Upload\r\n               </Space>\r\n            </Upload>\r\n          </Space>\r\n        </Row>\r\n        {/* <Row>\r\n          <Form\r\n            name=\"basic\"\r\n            form={form}\r\n            layout={\"horizontal\"}\r\n            initialValues={{ remember: true }}\r\n            onFinish={onFinish}\r\n            onFinishFailed={onFinishFailed}\r\n          >\r\n            <Form.Item label=\"Image Owner ID: \" name=\"imageOwnerId\">\r\n               {props.info.id}\r\n            </Form.Item>\r\n            <Form.Item label=\"Image Reference: \" name=\"imageReferenceId\">\r\n               Barangay\r\n            </Form.Item>\r\n          </Form>\r\n        </Row> */}\r\n      </Modal>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default AddDriverImageModal;\r\n","import React, { useState, useEffect } from \"react\";\r\nimport { Modal, Button, Form, Input } from \"antd\";\r\nimport axios from \"axios\";\r\nimport { EditOutlined  } from \"@ant-design/icons\";\r\n\r\nfunction EditDriverModal(props) {\r\n  const [isModalVisible, setIsModalVisible] = useState(false);\r\n  const [form] = Form.useForm();\r\n  const [confirmLoading, setConfirmLoading] = useState(false);\r\n  const [ifCanceled, setIfCanceled] = useState(false);\r\n  const [ifChanged, setIfChanged] = useState();\r\n\r\n  const showModal = () => {\r\n    form.setFieldsValue({\r\n      id: props.info.id,\r\n      firstName: props.info.firstName,\r\n      middleName: props.info.middleName,\r\n      lastName: props.info.lastName,\r\n      address: props.info.address,\r\n      contactNumber: props.info.contactNumber,\r\n      email: props.info.email,\r\n    });\r\n    setIsModalVisible(true);\r\n    setIfChanged(false);\r\n  };\r\n\r\n  const handleOk = () => {\r\n    setIsModalVisible(false);\r\n  };\r\n\r\n  const handleCancel = () => {\r\n    setIfCanceled(true);\r\n    setIsModalVisible(false);\r\n  };\r\n  const handleClose = () => {\r\n    if (ifCanceled) {\r\n    } else {\r\n      props.afterClosing();\r\n    }\r\n  };\r\n\r\n  const onFinish = (values) => {\r\n    //console.log(ifChanged);\r\n    setConfirmLoading(true);\r\n    setIfCanceled(false);\r\n    props.passedData(props.info);\r\n\r\n    axios\r\n      .post(\"/api/v1/drivers/update_driver\", {\r\n        id: values.id,\r\n        firstName: values.firstName,\r\n        middleName: values.middleName,\r\n        lastName: values.lastName,\r\n        address: values.address,\r\n        contactNumber: values.contactNumber,\r\n        email: values.email,\r\n      })\r\n      .then((res) => {\r\n        setTimeout(() => {\r\n          setIsModalVisible(false);\r\n          setConfirmLoading(false);\r\n        }, 2000);\r\n        {\r\n          ifChanged\r\n            ? Modal.success({\r\n                content: \"Successfully Updated Driver Info\",\r\n              })\r\n            : Modal.success({\r\n                content: \"Driver Info is up to date\",\r\n              });\r\n        }\r\n      })\r\n      .catch((error) => console.log(error));\r\n\r\n    //console.log(ifChanged);\r\n  };\r\n\r\n  const onFinishFailed = (errorInfo) => {\r\n    Modal.error({\r\n      content: \"Failure to Update Driver Info\",\r\n    });\r\n    setTimeout(() => {\r\n      setIsModalVisible(true);\r\n      setConfirmLoading(false);\r\n    }, 2000);\r\n    // console.log(\"Failed:\", errorInfo);\r\n  };\r\n  const onValuesChange = (changedValues, allValues) => {\r\n    //console.log(\"Changed\", allValues, changedValues);\r\n    setIfChanged(true);\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <Button type=\"primary\" className=\"modal-button\" onClick={showModal}>\r\n        <span className=\"desktop-view\"><EditOutlined /> Edit</span>\r\n        <span className=\"mobile-view\"><EditOutlined /></span>\r\n      </Button>\r\n      <Modal\r\n        title=\"Update Driver Info\"\r\n        confirmLoading={confirmLoading}\r\n        visible={isModalVisible}\r\n        onOk={onFinish}\r\n        onCancel={handleCancel}\r\n        afterClose={handleClose}\r\n        destroyOnClose={true}\r\n        footer={[\r\n          <Button key=\"back\" className=\"modal-button\" onClick={handleCancel}>\r\n            Cancel\r\n          </Button>,\r\n          <Button form=\"myForm\" className=\"modal-button\" htmlType=\"submit\" type=\"primary\">\r\n            Update\r\n          </Button>,\r\n        ]}\r\n      >\r\n        <Form\r\n          layout=\"vertical\"\r\n          name=\"basic\"\r\n          form={form}\r\n          initialValues={{ remember: true }}\r\n          onFinish={onFinish}\r\n          onFinishFailed={onFinishFailed}\r\n          onValuesChange={onValuesChange}\r\n          id=\"myForm\"\r\n        >\r\n          <Form.Item label=\"Driver ID:\" name=\"id\">\r\n            <Input disabled={true} bordered={false} />\r\n          </Form.Item>\r\n          <Form.Item\r\n            label=\"Firstname:\"\r\n            name=\"firstName\"\r\n            rules={[\r\n              { required: true, message: \"Please input Firstname!\" },\r\n            ]}\r\n          >\r\n            <Input />\r\n          </Form.Item>\r\n\r\n          <Form.Item\r\n            label=\"Middlename:\"\r\n            name=\"middleName\"\r\n            rules={[\r\n              { required: true, message: \"Please input Middlename!\" },\r\n            ]}\r\n          >\r\n            <Input />\r\n          </Form.Item>\r\n          <Form.Item\r\n            label=\"Lastname:\"\r\n            name=\"lastName\"\r\n            rules={[\r\n              { required: true, message: \"Please input Lastname!\" },\r\n            ]}\r\n          >\r\n            <Input />\r\n          </Form.Item>\r\n          <Form.Item\r\n            label=\"Contact:\"\r\n            name=\"contactNumber\"\r\n            rules={[\r\n              { required: true, message: \"Please input Contact Number!\" },\r\n            ]}\r\n          >\r\n            <Input />\r\n          </Form.Item>\r\n          <Form.Item\r\n            label=\"Address:\"\r\n            name=\"address\"\r\n            rules={[\r\n              { required: true, message: \"Please input the Address!\" },\r\n            ]}\r\n          >\r\n            <Input />\r\n          </Form.Item>\r\n          <Form.Item\r\n            label=\"Email:\"\r\n            name=\"email\"\r\n            rules={[\r\n              { required: true, message: \"Please input Email!\" },\r\n            ]}\r\n          >\r\n            <Input />\r\n          </Form.Item>\r\n        </Form>\r\n      </Modal>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default EditDriverModal;\r\n","import React, { useEffect, useState } from \"react\";\r\nimport { Table, Space, Input, Row, Col, Divider } from \"antd\";\r\nimport axios from \"axios\";\r\nimport Column from \"antd/lib/table/Column\";\r\nimport ColumnGroup from \"antd/lib/table/ColumnGroup\";\r\nimport DriversInfoModal from \"./DriversInfoModal\";\r\nimport AddDriverModal from \"./AddDriverModal\";\r\nimport AddDriverImageModal from \"./AddDriverImageModal\";\r\nimport EditDriverModal from \"./EditDriverModal\";\r\n\r\nfunction DriversTableList() {\r\n  const [drivers, setDrivers] = useState([]);\r\n  const { Search } = Input;\r\n  const [dataFromModal, setDataFromModal] = useState(\"\");\r\n\r\n  useEffect(() => {\r\n    axios\r\n      .get(\"/api/v1/drivers/\")\r\n      .then((res) => {\r\n        // console.log(res);\r\n        let data = res.data;\r\n        setDrivers(data);\r\n      })\r\n      .catch((error) => console.log(error));\r\n  }, []);\r\n\r\n  const onSearch = (value) => {\r\n    axios\r\n      .post(\"/api/v1/drivers/search_drivers\", { value: value })\r\n      .then((_res) => {\r\n        console.log(_res);\r\n        let data = _res.data;\r\n        setDrivers(data);\r\n        //console.log(\"success\");\r\n      });\r\n\r\n    //console.log(value);\r\n  };\r\n\r\n  const modalClosed = () => {\r\n    console.log(\"Passed data from modal\", dataFromModal);\r\n    axios.get(\"/api/v1/drivers/\").then((res) => {\r\n      //console.log(res);\r\n\r\n      let data = res.data;\r\n      setDrivers(data);\r\n    });\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <Row justify=\"space-between\">\r\n        <Col span={4}>\r\n          <Space direction=\"vertical\">\r\n            <Search\r\n              placeholder=\"Search Drivers\"\r\n              onSearch={onSearch}\r\n              allowClear={true}\r\n              enterButton\r\n            />\r\n          </Space>\r\n        </Col>\r\n        <Col span={4}>\r\n          <AddDriverModal\r\n            info={\"\"}\r\n            passedData={setDataFromModal}\r\n            afterClosing={modalClosed}\r\n          />\r\n        </Col>\r\n      </Row>\r\n      <Divider orientation=\"center\">List of Drivers</Divider>\r\n      <Row>\r\n        <Table dataSource={drivers} scroll={{ x: 1000, y: 500 }} sticky>\r\n          {/* <ColumnGroup title=\"Id\" dataIndex=\"id\" key=\"id\"></ColumnGroup> */}\r\n          {/* <ColumnGroup title=\"Name\" key=\"name\"> */}\r\n          <Column\r\n            title=\"Firstname\"\r\n            dataIndex=\"firstName\"\r\n            key=\"firstName\"\r\n          ></Column>\r\n          <Column\r\n            title=\"Middlename\"\r\n            dataIndex=\"middleName\"\r\n            key=\"middleName\"\r\n          ></Column>\r\n          <Column title=\"Lastname\" dataIndex=\"lastName\" key=\"lastName\"></Column>\r\n          {/* </ColumnGroup> */}\r\n          <ColumnGroup\r\n            title=\"Contact\"\r\n            dataIndex=\"contactNumber\"\r\n            key=\"contactNumber\"\r\n          ></ColumnGroup>\r\n          <ColumnGroup\r\n            title=\"Address\"\r\n            dataIndex=\"address\"\r\n            key=\"address\"\r\n          ></ColumnGroup>\r\n          <ColumnGroup\r\n            title=\"Email\"\r\n            dataIndex=\"email\"\r\n            key=\"email\"\r\n          ></ColumnGroup>\r\n          <ColumnGroup\r\n            title=\"Actions\"\r\n            key=\"actions\"\r\n            fixed=\"right\"\r\n            width=\"35vh\"\r\n            render={(value) => (\r\n              <Space>\r\n                <DriversInfoModal\r\n                  info={value}\r\n                  passedData={setDataFromModal}\r\n                  afterClosing={modalClosed}\r\n                />\r\n                <EditDriverModal\r\n                  info={value}\r\n                  passedData={setDataFromModal}\r\n                  afterClosing={modalClosed}\r\n                />\r\n                <AddDriverImageModal info={value} />\r\n              </Space>\r\n            )}\r\n          ></ColumnGroup>\r\n        </Table>\r\n      </Row>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default DriversTableList;\r\n"],"sourceRoot":""}